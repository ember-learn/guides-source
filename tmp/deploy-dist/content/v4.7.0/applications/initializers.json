{"data":{"type":"contents","id":"applications/initializers","attributes":{"content":"Initializers provide an opportunity to configure your application as it boots.\n\nThere are two types of initializers: application initializers and application instance initializers.\n\nApplication initializers are run as your application boots,\nand provide the primary means to configure [dependency injections](../dependency-injection/) in your application.\n\nApplication instance initializers are run as an application instance is loaded.\nThey provide a way to configure the initial state of your application,\nas well as to set up dependency injections that are local to the application instance\n(e.g. A/B testing configurations).\n\nOperations performed in initializers should be kept as lightweight as possible\nto minimize delays in loading your application.\nAlthough advanced techniques exist for allowing asynchrony in application initializers\n(i.e. `deferReadiness` and `advanceReadiness`), these techniques should generally be avoided.\nAny asynchronous loading conditions (e.g. user authorization) are almost always\nbetter handled in your application route's hooks,\nwhich allows for DOM interaction while waiting for conditions to resolve.\n\n## Application Initializers\n\nApplication initializers can be created with Ember CLI's `initializer` generator:\n\n```bash\nember generate initializer shopping-cart\n```\n\nLet's customize the `shopping-cart` initializer to inject a `cart` property into all the routes in your application:\n\n```javascript {data-filename=app/initializers/shopping-cart.js}\nexport function initialize(application) {\n  application.inject('route', 'cart', 'service:shopping-cart');\n};\n\nexport default {\n  initialize\n};\n```\n\n## Application Instance Initializers\n\nApplication instance initializers can be created with Ember CLI's `instance-initializer` generator:\n\n```bash\nember generate instance-initializer logger\n```\n\nLet's add some simple logging to indicate that the instance has booted:\n\n```javascript {data-filename=app/instance-initializers/logger.js}\nexport function initialize(applicationInstance) {\n  let logger = applicationInstance.lookup('logger:main');\n  logger.log('Hello from the instance initializer!');\n}\n\nexport default {\n  initialize\n};\n```\n\n## Specifying Initializer Order\n\nIf you'd like to control the order in which initializers run, you can use the `before` and/or `after` options:\n\n```javascript {data-filename=app/initializers/config-reader.js}\nexport function initialize(application) {\n  // ... your code ...\n};\n\nexport default {\n  before: 'websocket-init',\n  initialize\n};\n```\n\n```javascript {data-filename=app/initializers/websocket-init.js}\nexport function initialize(application) {\n  // ... your code ...\n};\n\nexport default {\n  after: 'config-reader',\n  initialize\n};\n```\n\n```javascript {data-filename=app/initializers/asset-init.js}\nexport function initialize(application) {\n  // ... your code ...\n};\n\nexport default {\n  after: ['config-reader', 'websocket-init'],\n  initialize\n};\n```\n\nNote that ordering only applies to initializers of the same type (i.e. application or application instance).\nApplication initializers will always run before application instance initializers.\n\n## Customizing Initializer Names\n\nBy default initializer names are derived from their module name. This initializer will be given the name `logger`:\n\n```javascript {data-filename=app/instance-initializers/logger.js}\nexport function initialize(applicationInstance) {\n  let logger = applicationInstance.lookup('logger:main');\n  logger.log('Hello from the instance initializer!');\n}\n\nexport default { initialize };\n```\n\nIf you want to change the name you can simply rename the file, but if needed you can also specify the name explicitly:\n\n```javascript {data-filename=app/instance-initializers/logger.js}\nexport function initialize(applicationInstance) {\n  let logger = applicationInstance.lookup('logger:main');\n  logger.log('Hello from the instance initializer!');\n}\n\nexport default {\n  name: 'my-logger',\n  initialize\n};\n```\n\nThis initializer will now have the name `my-logger`.","description":"Initializers provide an opportunity to configure your application as it boots. \n\nThere are two types of initializers: application initializers and application instance initializers. \n\nApplication initializers are run as your application boots, and provide..."}}}