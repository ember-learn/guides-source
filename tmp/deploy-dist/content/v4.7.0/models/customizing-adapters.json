{"data":{"type":"contents","id":"models/customizing-adapters","attributes":{"content":"In Ember Data, an Adapter determines how data is persisted to a\nbackend data store. Things such as the backend host, URL format\nand headers used to talk to a REST API can all be configured\nin an adapter.\n\nEmber Data's default Adapter has some built-in assumptions about\nhow a [REST API should look](http://jsonapi.org/). If your backend conventions\ndiffer from those assumptions, Ember Data allows either slight adjustments\nor you can switch to a different adapter if your backend works noticeably\ndifferently.\n\n_(If you're looking to adjust how the data sent to the backend is formatted,\ncheck the [serializer](../customizing-serializers/) page.)_\n\nExtending Adapters is a natural process in Ember Data. Ember takes the\nposition that you should extend an adapter to add different\nfunctionality. This results in code that is\nmore testable, easier to understand and reduces bloat for people who\nmay want to subclass your adapter.\n\nIf your backend has some consistent rules you can define an\n`adapter:application`. The `adapter:application` will get priority over\nthe default Adapter, however it will still be superseded by model\nspecific Adapters.\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  // Application specific overrides go here\n}\n```\n\nIf there is a model that does not follow the backend's typical conventions, you\ncan create an adapter that is specific to that model. The model-specific adapter\nwill override the rules in the `application` adapter.\n\nTo create a model-specific adapter, run the command `ember generate adapter <model-name>`.\nFor example, suppose there is a `post` model that needs to talk to the `v1` API\nin the backend. We can run `ember generate adapter post` to create the adapter,\nthen specify the `post` adapter's namespace:\n\n```javascript {data-filename=app/adapters/post.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default class PostAdapter extends JSONAPIAdapter {\n  namespace = 'api/v1';\n}\n```\n\nEmber Data comes with several built-in adapters.\nFeel free to use these adapters as a starting point for creating your own custom adapter.\n\n- [`Adapter`](https://api.emberjs.com/ember-data/release/classes/Adapter) is the basic adapter\nwith no functionality. It is generally a good starting point if you\nwant to create an adapter that is radically different from the other\nEmber adapters.\n\n- [`JSONAPIAdapter`](https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter)\nThe `JSONAPIAdapter` is the default adapter and follows JSON:API\nconventions to communicate with an HTTP server by transmitting JSON\nvia XHR.\n\n- [`RESTAdapter`](https://api.emberjs.com/ember-data/release/classes/RESTAdapter)\nThe `RESTAdapter` allows your store to communicate with an HTTP server\nby transmitting JSON via XHR. Before Ember Data 2.0 this adapter was the default.\n\n\n## Customizing the JSONAPIAdapter\n\nThe\n[JSONAPIAdapter](https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter)\nhas a handful of hooks that are commonly used to extend it to work\nwith non-standard backends.\n\n### URL Conventions\n\nThe `JSONAPIAdapter` is smart enough to determine the URLs it\ncommunicates with based on the name of the model. For example, if you\nask for a `Post` by ID:\n\n```javascript\nstore.findRecord('post', 1).then(function(post) {\n});\n```\n\nThe JSON:API adapter will automatically send a `GET` request to `/posts/1`.\n\nThe actions you can take on a record map onto the following URLs in the\nJSON:API adapter:\n\n<table>\n  <thead>\n    <tr><th>Action</th><th>HTTP Verb</th><th>URL</th></tr>\n  </thead>\n  <tbody>\n    <tr><th>Find</th><td>GET</td><td>/posts/123</td></tr>\n    <tr><th>Find All</th><td>GET</td><td>/posts</td></tr>\n    <tr><th>Update</th><td>PATCH</td><td>/posts/123</td></tr>\n    <tr><th>Create</th><td>POST</td><td>/posts</td></tr>\n    <tr><th>Delete</th><td>DELETE</td><td>/posts/123</td></tr>\n  </tbody>\n</table>\n\n#### Pluralization Customization\n\nTo facilitate pluralizing model names when generating route URLs Ember\nData comes bundled with\n[Ember Inflector](https://github.com/stefanpenner/ember-inflector), an\nActiveSupport::Inflector compatible library for inflecting words\nbetween plural and singular forms. Irregular or uncountable\npluralizations can be specified via `Ember.Inflector.inflector`.\n\nTo do this, create an [Initializer](../../applications/initializers/) file containing your customizations. The Ember CLI's `initializer` generator can be used `ember generate initializer custom-inflector-rules` to create the file. Update its content as follows:\n\n```javascript {data-filename=app/initializers/custom-inflector-rules.js}\nimport Inflector from 'ember-inflector';\n\nexport function initialize(/* application */) {\n  const inflector = Inflector.inflector;\n\n  // Tell the inflector that the plural of \"campus\" is \"campuses\"\n  inflector.irregular('campus', 'campuses');\n\n  // Tell the inflector that the plural of \"advice\" is \"advice\"\n  inflector.uncountable('advice');\n}\n\nexport default {\n  name: 'custom-inflector-rules',\n  initialize\n};\n```\n\nThe JSON:API adapter will now make requests for `Campus` models to\n`/campuses` and `/campuses/1` (instead of `/campus/` and `/campus/1`),\nand requests for `advice` to `/advice` and `/advice/1` (instead of\n`/advices/` and `/advices/1`).\n\nWhen specifying irregular inflection rules for compound words, only the final word or phrase should be specified. For example, to specify the plural of `redCow` as `redKine` or `red-cow` as `red-kine`, only the final word segments `cow` and `kine` should be specified:\n\n```javascript\ninflector.irregular('cow', 'kine');\n```\n\n#### Endpoint Path Customization\n\nThe `namespace` property can be used to prefix requests with a\nspecific URL namespace.\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  namespace = 'api/1';\n}\n```\n\nRequests for `person` would now target `https://api.emberjs.com/api/1/people/1`.\n\n\n#### Host Customization\n\nBy default, the adapter will target the current domain. If you would\nlike to specify a new domain you can do so by setting the `host`\nproperty on the adapter.\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  host = 'https://api.example.com';\n}\n```\n\nRequests for `person` would now target `https://api.example.com/people/1`.\n\n\n#### Path Customization\n\nBy default, the `JSONAPIAdapter` will attempt to pluralize and dasherize\nthe model name to generate the path name. If this convention does not\nconform to your backend you can override the `pathForType` method.\n\nFor example, if you did not want to pluralize model names and needed\nunderscore_case instead of dash-case you could override the\n`pathForType` method like this:\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\nimport { underscore } from '@ember/string';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  pathForType(type) {\n    return underscore(type);\n  }\n}\n```\n\nRequests for `person` would now target `/person/1`.\nRequests for `user-profile` would now target `/user_profile/1`.\n\n#### Headers customization\n\nSome APIs require HTTP headers, e.g. to provide an API key. Arbitrary\nheaders can be set as key/value pairs on the `JSONAPIAdapter`'s `headers`\nobject and Ember Data will send them along with each ajax request.\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  headers = {\n    'API_KEY': 'secret key',\n    'ANOTHER_HEADER': 'Some header value'\n  };\n}\n```\n\nYou can combine tracked properties with ES6 getters to make `headers` dynamic. For example, you may have a `session` service with a tracked property called `authToken`:\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\nimport { service } from '@ember/service';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  @service session;\n\n  get headers() {\n    return {\n      'API_KEY': this.session.authToken,\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  }\n}\n```\n\n[Getters](../../in-depth-topics/autotracking-in-depth/) recompute with each\naccess, so you could just as easily rely upon another dynamic value such as\n`document.cookie`.\n\n```javascript {data-filename=app/adapters/application.js}\nimport JSONAPIAdapter from '@ember-data/adapter/json-api';\nimport { get } from '@ember/object';\n\nexport default class ApplicationAdapter extends JSONAPIAdapter {\n  get headers() {\n    return {\n      'API_KEY': get(document.cookie.match(/apiKey\\=([^;]*)/), '1'),\n      'ANOTHER_HEADER': 'Some header value'\n    };\n  }\n}\n```\n\n## Community Adapters\n\nIf none of the built-in Ember Data Adapters work for your backend,\nbe sure to check out some of the community maintained Ember Data\nAdapters. Some good places to look for Ember Data Adapters include:\n\n- [Ember Observer](http://emberobserver.com/categories/data)\n- [GitHub](https://github.com/search?q=ember+data+adapter&ref=cmdform)","description":"In Ember Data, an Adapter determines how data is persisted to a backend data store. Things such as the backend host, URL format and headers used to talk to a REST API can all be configured in an adapter. \n\nEmber Data's default Adapter has some built-in..."}}}