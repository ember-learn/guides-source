{"data":{"type":"contents","id":"models/finding-records","attributes":{"content":"The Ember Data store provides an interface for retrieving records of a single type.\n\n### Retrieving a Single Record\n\nUse [`store.findRecord()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/findRecord?anchor=findRecord) to retrieve a record by its type and ID.\nThis will return a promise that fulfills with the requested record:\n\n```javascript\n// GET /blog-posts/1\nthis.store.findRecord('blog-post', 1)  // => GET /blog-posts/1\n  .then(function(blogPost) {\n      // Do something with `blogPost`\n  });\n```\n\nUse [`store.peekRecord()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/peekRecord?anchor=peekRecord) to retrieve a record by its type and ID, without making a network request.\nThis will return the record only if it is already present in the store:\n\n```javascript\nlet blogPost = this.store.peekRecord('blog-post', 1); // => no network request\n```\n\n### Retrieving Multiple Records\n\nUse [`store.findAll()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/findAll?anchor=findAll) to retrieve all of the records for a given type:\n\n```javascript\n// GET /blog-posts\nthis.store.findAll('blog-post') // => GET /blog-posts\n  .then(function(blogPosts) {\n    // Do something with `blogPosts`\n  });\n```\n\nUse [`store.peekAll()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/peekAll?anchor=peekAll) to retrieve all of the records for a given type that are already loaded into the store, without making a network request:\n\n```javascript\nlet blogPosts = this.store.peekAll('blog-post'); // => no network request\n```\n\n`store.findAll()` returns a `PromiseArray` that fulfills to a `RecordArray` and `store.peekAll` directly returns a `RecordArray`.\n\nIt's important to note that `RecordArray` is not a JavaScript array, it's an object that implements [`MutableArray`](https://api.emberjs.com/ember/release/classes/MutableArray).\nThis is important because, for example, if you want to retrieve records by index,\nthe `[]` notation will not work--you'll have to use `objectAt(index)` instead.\n\n### Querying for Multiple Records\n\nEmber Data provides the ability to query for records that meet certain criteria.\nCalling [`store.query()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/query?anchor=query) will make a `GET` request with the passed object serialized as query params.\nThis method returns a `PromiseArray` in the same way as `findAll`.\n\nFor example, we could search for all `person` models who have the name of\n`Peter`:\n\n```javascript\n// GET to /persons?filter[name]=Peter\nthis.store.query('person', {\n  filter: {\n    name: 'Peter'\n  }\n}).then(function(peters) {\n  // Do something with `peters`\n});\n```\n\n### Querying for A Single Record\n\nIf you are using an adapter that supports server requests capable of returning a single model object,\nEmber Data provides a convenience method [`store.queryRecord()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/queryRecord?anchor=queryRecord) that will return a promise that resolves with that single record.\nThe request is made via a method `queryRecord()` defined by the adapter.\n\nFor example, if your server API provides an endpoint for the currently logged in user:\n\n```text\n// GET /api/current_user\n{\n  user: {\n    id: 1234,\n    username: 'admin'\n  }\n}\n```\n\nAnd if the adapter for the `User` model defines a `queryRecord()` method that targets that endpoint:\n\n```javascript {data-filename=app/adapters/user.js}\nimport Adapter from '@ember-data/adapter';\nimport fetch from 'fetch';\n\nexport default class UserAdapter extends Adapter {\n  queryRecord(store, type, query) {\n    return fetch('/api/current_user');\n  }\n}\n```\n\nThen, calling [`store.queryRecord()`](https://api.emberjs.com/ember-data/release/classes/Store/methods/queryRecord?anchor=queryRecord) will retrieve that object from the server:\n\n```javascript\nstore.queryRecord('user', {}).then(function(user) {\n  let username = user.get('username');\n  console.log(`Currently logged in as ${username}`);\n});\n```\n\nAs in the case of `store.query()`, a query object can also be passed to `store.queryRecord()` and is available for the adapter's `queryRecord()` to use to qualify the request.\nHowever the adapter must return a single model object, not an array containing one element,\notherwise Ember Data will throw an exception.\n\nNote that Ember's default [JSON:API adapter](https://api.emberjs.com/ember-data/release/classes/JSONAPIAdapter) does not provide the functionality needed to support `queryRecord()` directly as it relies on REST request definitions that return result data in the form of an array.\n\nIf your server API or your adapter only provides array responses but you wish to retrieve just a single record, you can alternatively use the `query()` method as follows:\n\n```javascript\n// GET to /users?filter[email]=tomster@example.com\ntom = store.query('user', {\n  filter: {\n    email: 'tomster@example.com'\n  }\n}).then(function(users) {\n  return users.get('firstObject');\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"The Ember Data store provides an interface for retrieving records of a single type. Retrieving a Single Record \n\nUse store.findRecord() to retrieve a record by its type and ID. This will return a promise that fulfills with the requested record: \n\n// GET..."}}}