{"data":{"type":"contents","id":"models/handling-metadata","attributes":{"content":"Along with the records returned from your store, you'll likely need to handle some kind of metadata. _Metadata_ is data that goes along with a specific _model_ or _type_ instead of a record.\n\nPagination is a common example of using metadata. Imagine a blog with far more posts than you can display at once. You might query it like so:\n\n```javascript\nlet result = this.store.query('post', {\n  limit: 10,\n  offset: 0\n});\n```\n\nTo get different _pages_ of data, you'd simply change your offset in increments of 10. So far, so good. But how do you know how many pages of data you have? Your server would need to return the total number of records as a piece of metadata.\n\nEach serializer will expect the metadata to be returned differently. For example, Ember Data's JSON deserializer looks for a `meta` key:\n\n```javascript\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Progressive Enhancement is Dead\",\n    \"comments\": [\"1\", \"2\"],\n    \"links\": {\n      \"user\": \"/people/tomdale\"\n    },\n    // ...\n  },\n\n  \"meta\": {\n    \"total\": 100\n  }\n}\n```\n\nRegardless of the serializer used, this metadata is extracted from the response. You can then read it with `.meta`.\n\nThis can be done on the result of a `store.query()` call:\n\n```javascript\nstore.query('post').then(result => {\n  let meta = result.meta;\n});\n```\n\nOn a belongsTo relationship:\n\n```javascript\nlet post = store.peekRecord('post', 1);\n\nlet author = await post.author;\nlet meta = author.meta;\n```\n\nOr on a hasMany relationship:\n\n```javascript\nlet post = store.peekRecord('post', 1);\n\nlet comments = await post.comments;\nlet meta = comments.meta;\n```\n\nAfter reading it, `meta.total` can be used to calculate how many pages of posts you'll have.\n\nTo use the `meta` data outside of the `model` hook, you need to return it:\n\n```javascript {data-filename=app/routes/users.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class UsersRoute extends Route {\n  @service store;\n  \n  model() {\n    return this.store.query('user', {}).then((results) => {\n      return {\n        users: results,\n        meta: results.meta\n      };\n    });\n  }\n  setupController(controller, { users, meta }) {\n    super.setupController(controller, users);\n    controller.meta = meta;\n  }\n}\n```\n\nTo customize metadata extraction, check out the documentation for your serializer.","description":"Along with the records returned from your store, you'll likely need to handle some kind of metadata. Metadata is data that goes along with a specific model or type instead of a record. \n\nPagination is a common example of using metadata. Imagine a blog with..."}}}