{"data":{"type":"contents","id":"components/looping-through-lists","attributes":{"content":"Oftentimes we'll need to repeat a component multiple times in a row, with\ndifferent data for each usage of the component. We can use the\n[`{{#each}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each?anchor=each)\nhelper to loop through lists of items like this, repeating a section of template\nfor each item in the list.\n\nFor instance, in a messaging app, we could have a `<Message>` component that we\nrepeat for each message that the users have sent to each other.\n\n```handlebars {data-filename=\"app/components/messages.hbs\"}\n<div class=\"messages\">\n  <Message\n    @username=\"Tomster\"\n    @userIsActive={{true}}\n    @userLocalTime=\"4:56pm\"\n  >\n    <p>\n      Hey Zoey, have you had a chance to look at the EmberConf\n      brainstorming doc I sent you?\n    </p>\n  </Message>\n  <Message\n    @username=\"Zoey\"\n    @userIsActive={{true}}\n  >\n    <p>Hey!</p>\n\n    <p>\n      I love the ideas! I'm really excited about where this year's\n      EmberConf is going, I'm sure it's going to be the best one yet.\n      Some quick notes:\n    </p>\n\n    <ul>\n      <li>\n        Definitely agree that we should double the coffee budget this\n        year (it really is impressive how much we go through!)\n      </li>\n      <li>\n        A blimp would definitely make the venue very easy to find, but\n        I think it might be a bit out of our budget. Maybe we could\n        rent some spotlights instead?\n      </li>\n      <li>\n        We absolutely will need more hamster wheels, last year's line\n        was <em>way</em> too long. Will get on that now before rental\n        season hits its peak.\n      </li>\n    </ul>\n\n    <p>Let me know when you've nailed down the dates!</p>\n  </Message>\n\n  <NewMessageInput />\n</div>\n```\n\nFirst, we would add a component class and extract the parts of each `<Message>`\ncomponent that are different into an array on that class. We would extract the\nusername, active value, local time, and the yielded content for each message.\nFor the yielded content, since it's plain HTML, we can extract it as a string.\n\n```js {data-filename=\"app/components/messages.js\"}\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nexport default class MessagesComponent extends Component {\n  @tracked messages = [\n    {\n      username: 'Tomster',\n      active: true,\n      localTime: '4:56pm',\n      content: `\n        <p>\n          Hey Zoey, have you had a chance to look at the EmberConf\n          brainstorming doc I sent you?\n        </p>\n      `\n    },\n    {\n      username: 'Zoey',\n      active: true,\n      content: `\n        <p>Hey!</p>\n\n        <p>\n          I love the ideas! I'm really excited about where this year's\n          EmberConf is going, I'm sure it's going to be the best one yet.\n          Some quick notes:\n        </p>\n\n        <ul>\n          <li>\n            Definitely agree that we should double the coffee budget this\n            year (it really is impressive how much we go through!)\n          </li>\n          <li>\n            A blimp would definitely make the venue very easy to find, but\n            I think it might be a bit out of our budget. Maybe we could\n            rent some spotlights instead?\n          </li>\n          <li>\n            We absolutely will need more hamster wheels, last year's line\n            was <em>way</em> too long. Will get on that now before rental\n            season hits its peak.\n          </li>\n        </ul>\n\n        <p>Let me know when you've nailed down the dates!</p>\n      `\n    }\n  ];\n}\n```\n\nThen, we can add an `{{each}}` helper to the template by passing\n`this.messages` to it. `{{each}}` will receive each message as its first block\nparam, and we can use that item in the template block for the loop.\n\n```handlebars {data-filename=\"app/components/messages.hbs\" data-diff=\"+2,+3,+4,+5,+6,+7,+8,+9,+10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51\"}\n<div class=\"messages\">\n  {{#each this.messages as |message|}}\n    <Message\n      @username={{message.username}}\n      @userIsActive={{message.active}}\n      @userLocaltime={{message.localTime}}\n    >\n      {{{message.content}}}\n    </Message>\n  {{/each}}\n  <Message\n    @username=\"Tomster\"\n    @userIsActive={{true}}\n    @userLocalTime=\"4:56pm\"\n  >\n    <p>\n      Hey Zoey, have you had a chance to look at the EmberConf\n      brainstorming doc I sent you?\n    </p>\n  </Message>\n  <Message\n    @username=\"Zoey\"\n    @userIsActive={{true}}\n  >\n    <p>Hey!</p>\n\n    <p>\n      I love the ideas! I'm really excited about where this year's\n      EmberConf is going, I'm sure it's going to be the best one yet.\n      Some quick notes:\n    </p>\n\n    <ul>\n      <li>\n        Definitely agree that we should double the coffee budget this\n        year (it really is impressive how much we go through!)\n      </li>\n      <li>\n        A blimp would definitely make the venue very easy to find, but\n        I think it might be a bit out of our budget. Maybe we could\n        rent some spotlights instead?\n      </li>\n      <li>\n        We absolutely will need more hamster wheels, last year's line\n        was <em>way</em> too long. Will get on that now before rental\n        season hits its peak.\n      </li>\n    </ul>\n\n    <p>Let me know when you've nailed down the dates!</p>\n  </Message>\n\n  <NewMessageInput />\n</div>\n```\n\nNotice that we used triple curly brackets around `{{{message.content}}}`. This\nis how Ember knows to insert the content directly as HTML, rather than directly\nas a string.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <p>\n        Triple curly brackets are a convenient way to put dynamic HTML into Ember templates,\n        but are not recommended for production apps.\n        Inserting unknown HTML can create unexpected results and security issues.\n        Be sure to sanitize the HTML before you render it.\n        </p>\n        <p>\n        We can use the <a href=\"https://api.emberjs.com/ember/release/functions/@ember%2Ftemplate/htmlSafe\">htmlSafe</a>\n        function to mark a sanitized HTML as safe, then use double curly brackets to render the HTML.\n        We can also create a <a href=\"../helper-functions\">helper</a> that sanitizes the HTML, marks it as safe,\n        and returns the output.\n        </p>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n### Updating Lists\n\nNext, let's add a way for the user to send a new message. First, we need to\nadd an action for creating the new message. We'll add this to the\n`<NewMessageInput />` component:\n\n```handlebars {data-filename=\"app/components/new-message-input.hbs\" data-diff=\"-1,+2,-3,+4\"}\n<form>\n<form {{on \"submit\" this.createMessage}}>\n  <input>\n  <Input @value={{this.message}}>\n  <button type=\"submit\">\n    Send\n  </button>\n</form>\n```\n\nWe're using the `submit` event on the form itself here rather than adding a\n`click` event handler to the button since it is about submitting the form as a\nwhole. We also updated the `input` tag to instead use the built in `<Input>`\ncomponent, which automatically updates the value we pass to `@value`. Next,\nlet's add the component class:\n\n```javascript {data-filename=\"app/components/new-message-input.js\"}\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nexport default class NewMessageInputComponent extends Component {\n  @tracked message;\n\n  @action\n  createMessage(event) {\n    event.preventDefault();\n\n    if (this.message && this.args.onCreate) {\n      this.args.onCreate(this.message);\n\n      // reset the message input\n      this.message = '';\n    }\n  }\n}\n```\n\nThis action uses the `onCreate` argument to expose a public API for defining\nwhat happens when a message is created. This way, the `<NewMessageInput>`\ncomponent doesn't have to worry about the external details - it can focus on\ngetting the new message input.\n\nNext, we'll update the parent component to use this new argument.\n\n```handlebars {data-filename=\"app/components/messages.hbs\" data-diff=\"-12,+13\"}\n<div class=\"messages\">\n  {{#each this.messages as |message|}}\n    <Message\n      @username={{message.username}}\n      @userIsActive={{message.active}}\n      @userLocaltime={{message.localTime}}\n    >\n      {{{message.content}}}\n    </Message>\n  {{/each}}\n\n  <NewMessageInput />\n  <NewMessageInput @onCreate={{this.addMessage}} />\n</div>\n```\n\nAnd in the component class, we'll add the `addMessage` action. This action will\ncreate the new message from the text that the `<NewMessageInput>` component\ngives us, and push it into the messages array.\n\n```js {data-filename=\"app/components/messages.js\"}\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nexport default class MessagesComponent extends Component {\n  username = 'Zoey';\n\n  @action\n  addMessage(messageText) {\n    this.messages = [...this.messages, {\n      username: this.username,\n      active: true,\n      content: `<p>${messageText}</p>`\n    }];\n  }\n\n  @tracked messages = [\n    {\n      username: 'Tomster',\n      active: true,\n      localTime: '4:56pm',\n      content: `\n        <p>\n          Hey Zoey, have you had a chance to look at the EmberConf\n          brainstorming doc I sent you?\n        </p>\n      `\n    },\n    {\n      username: 'Zoey',\n      active: true,\n      content: `\n        <p>Hey!</p>\n\n        <p>\n          I love the ideas! I'm really excited about where this year's\n          EmberConf is going, I'm sure it's going to be the best one yet.\n          Some quick notes:\n        </p>\n\n        <ul>\n          <li>\n            Definitely agree that we should double the coffee budget this\n            year (it really is impressive how much we go through!)\n          </li>\n          <li>\n            A blimp would definitely make the venue very easy to find, but\n            I think it might be a bit out of our budget. Maybe we could\n            rent some spotlights instead?\n          </li>\n          <li>\n            We absolutely will need more hamster wheels, last year's line\n            was <em>way</em> too long. Will get on that now before rental\n            season hits its peak.\n          </li>\n        </ul>\n\n        <p>Let me know when you've nailed down the dates!</p>\n      `\n    }\n  ];\n}\n```\n\nNow, whenever we type a value and submit it in the form, a new message object\nwill be added to the array, and the `{{each}}` will update with the new item.\n\n### Item Indexes\n\nThe index of each item in the array is provided as a second block param. This\ncan be useful at times if you need the index, for instance if you needed to\nprint positions in a queue\n\n```javascript\nimport Component from '@glimmer/component';\n\nexport default class SomeComponent extends Component {\n  queue = [\n    { name: 'Yehuda' },\n    { name: 'Jen' },\n    { name: 'Rob' }\n  ];\n}\n```\n\n```handlebars\n<ul>\n  {{#each this.queue as |person index|}}\n    <li>Hello, {{person.name}}! You're number {{index}} in line</li>\n  {{/each}}\n</ul>\n```\n\n### Empty Lists\n\nThe [`{{#each}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each?anchor=each)\nhelper can also have a corresponding `{{else}}`. The contents of this block will\nrender if the array passed to `{{#each}}` is empty:\n\n```handlebars\n{{#each this.people as |person|}}\n  Hello, {{person.name}}!\n{{else}}\n  Sorry, nobody is here.\n{{/each}}\n```\n\n## Looping Through Objects\n\nThere are also times when we need to loop through the keys and values of an\nobject rather than an array, similar to JavaScript's `for...in` loop. We can use\nthe [`{{#each-in}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each-in?anchor=each-in)\nhelper to do this:\n\n```javascript {data-filename=/app/components/store-categories.js}\nimport Component from '@glimmer/component';\n\nexport default class StoreCategoriesComponent extends Component {\n  // Set the \"categories\" property to a JavaScript object\n  // with the category name as the key and the value a list\n  // of products.\n  categories = {\n    'Bourbons': ['Bulleit', 'Four Roses', 'Woodford Reserve'],\n    'Ryes': ['WhistlePig', 'High West']\n  };\n}\n```\n\n```handlebars {data-filename=/app/components/store-categories.hbs}\n<ul>\n  {{#each-in this.categories as |category products|}}\n    <li>{{category}}\n      <ol>\n        {{#each products as |product|}}\n          <li>{{product}}</li>\n        {{/each}}\n      </ol>\n    </li>\n  {{/each-in}}\n</ul>\n```\n\nThe template inside of the `{{#each-in}}` block is repeated once for each key in the passed object.\nThe first block parameter (`category` in the above example) is the key for this iteration,\nwhile the second block parameter (`products`) is the actual value of that key.\n\nThe above example will print a list like this:\n\n```html\n<ul>\n  <li>Bourbons\n    <ol>\n      <li>Bulleit</li>\n      <li>Four Roses</li>\n      <li>Woodford Reserve</li>\n    </ol>\n  </li>\n  <li>Ryes\n    <ol>\n      <li>WhistlePig</li>\n      <li>High West</li>\n    </ol>\n  </li>\n</ul>\n```\n\n### Ordering\n\nAn object's keys will be listed in the same order as the array returned from\ncalling `Object.keys` on that object. If you want a different sort order, you\nshould use `Object.keys` to get an array, sort that array with the built-in JavaScript\ntools, and use the [`{{#each}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each?anchor=each)\nhelper instead.\n\n### Empty Lists\n\nThe [`{{#each-in}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/each-in?anchor=each-in)\nhelper can have a matching `{{else}}`. The contents of this block will render if\nthe object is empty, null, or undefined:\n\n```handlebars\n{{#each-in this.people as |name person|}}\n  Hello, {{name}}! You are {{person.age}} years old.\n{{else}}\n  Sorry, nobody is here.\n{{/each-in}}\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Oftentimes we'll need to repeat a component multiple times in a row, with different data for each usage of the component. We can use the {{#each}} helper to loop through lists of items like this, repeating a section of template for each item in the list..."}}}