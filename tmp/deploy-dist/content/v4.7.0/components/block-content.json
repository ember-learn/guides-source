{"data":{"type":"contents","id":"components/block-content","attributes":{"content":"Component templates can leave one or more placeholders that users can fill with their own HTML.\nThese are called blocks.\nHere's an example that provides a component with the implicit default block.\n\n```handlebars\n<ExampleComponent>\n  This is the default <b>block content</b> that will\n  replace `{{yield}}` (or `{{yield to=\"default\"}}`)\n  in the `ExampleComponent` template.\n</ExampleComponent>\n```\n\nThis is equivalent to explicitly naming the default block using the named block syntax.\n\n```handlebars\n<ExampleComponent>\n  <:default>\n    This is the default <b>block content</b> that will\n    replace `{{yield}}` (or `{{yield to=\"default\"}}`)\n    in the `ExampleComponent` template.\n  </:default>\n</ExampleComponent>\n```\n\nThrough Block Content, users of the component can add additional styling and\nbehavior by using HTML, modifiers, and other components within the block.\n\nTo make that more concrete, let's take a look at two similar components\nrepresenting different user's messages.\n\n```handlebars {data-filename=\"app/components/received-message.hbs\"}\n<aside>\n  <div class=\"avatar is-active\" title=\"Tomster's avatar\">T</div>\n</aside>\n<section>\n  <h4 class=\"username\">\n    Tomster\n    <span class=\"local-time\">their local time is 4:56pm</span>\n  </h4>\n\n  <p>\n    Hey Zoey, have you had a chance to look at the EmberConf\n    brainstorming doc I sent you?\n  </p>\n</section>\n```\n\n```handlebars {data-filename=\"app/components/sent-message.hbs\"}\n<aside class=\"current-user\">\n  <div class=\"avatar\" title=\"Zoey's avatar\">Z</div>\n</aside>\n<section>\n  <h4 class=\"username\">Zoey</h4>\n\n  <p>Hey!</p>\n\n  <p>\n    I love the ideas! I'm really excited about where this year's\n    EmberConf is going, I'm sure it's going to be the best one yet.\n    Some quick notes:\n  </p>\n\n  <ul>\n    <li>\n      Definitely agree that we should double the coffee budget this\n      year (it really is impressive how much we go through!)\n    </li>\n    <li>\n      A blimp would definitely make the venue very easy to find, but\n      I think it might be a bit out of our budget. Maybe we could\n      rent some spotlights instead?\n    </li>\n    <li>\n      We absolutely will need more hamster wheels, last year's line\n      was <em>way</em> too long. Will get on that now before rental\n      season hits its peak.\n    </li>\n  </ul>\n\n  <p>Let me know when you've nailed down the dates!</p>\n</section>\n```\n\nInstead of having two different components, one for sent messages and one for\nreceived messages, we could instead try to create a single message component.\nInside of this message component, we could substitute the avatar and username\nwith generic components, too.\n\nTheir structure is pretty straightforward and similar, so we can use arguments\nand conditionals to handle the differences in content between them (see the\nprevious chapters for details on how to do this).\n\n```handlebars {data-filename=\"app/components/message.hbs\"}\n<Message::Avatar\n  @title={{@avatarTitle}}\n  @initial={{@avatarInitial}}\n  @isActive={{@userIsActive}}\n  class=\"{{if @isCurrentUser \"current-user\"}}\"\n/>\n<section>\n  <Message::Username\n    @name={{@username}}\n    @localTime={{@userLocalTime}}\n  />\n\n  ...\n</section>\n```\n\nThis works pretty well, but the message content is very different. It's also\npretty long, so it wouldn't really be easy to pass the message content through\nas an argument. What we really want is to leave a placeholder for any content\nsupplied by the `<Message>` tag.\n\nThe way to do this in Ember is by using the `{{yield}}` syntax.\n\n```handlebars {data-filename=\"app/components/message.hbs\"}\n<Message::Avatar\n  @title={{@avatarTitle}}\n  @initial={{@avatarInitial}}\n  @isActive={{@userIsActive}}\n  class=\"{{if @isCurrentUser \"current-user\"}}\"\n/>\n<section>\n  <Message::Username\n    @name={{@username}}\n    @localTime={{@userLocalTime}}\n  />\n\n  {{yield}}\n</section>\n```\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <code>{{yield}}</code> is named after a similar concept in scripting languages,\n        including Ruby, JavaScript and Python. You don't need to understand the connection\n        in order to use it, but if you're in the mood for a tangent, check out\n        <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">\n          the yield operator in JavaScript\n        </a>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\nYou can think of using `{{yield}}` as leaving a placeholder for the content of the\n`<Message>` tag.\n\n```handlebars {data-filename=\"app/components/received-message.hbs\"}\n<Message\n  @username=\"Tomster\"\n  @userIsActive={{true}}\n  @userLocalTime=\"4:56pm\"\n\n  @avatarTitle=\"Tomster's avatar\"\n  @avatarInitial=\"T\"\n>\n  <p>\n    Hey Zoey, have you had a chance to look at the EmberConf\n    brainstorming doc I sent you?\n  </p>\n</Message>\n```\n\n```handlebars {data-filename=\"app/components/sent-message.hbs\"}\n<Message\n  @username=\"Zoey\"\n  @isCurrentUser={{true}}\n\n  @avatarTitle=\"Zoey's avatar\"\n  @avatarInitial=\"Z\"\n>\n  <p>Hey!</p>\n\n  <p>\n    I love the ideas! I'm really excited about where this year's\n    EmberConf is going, I'm sure it's going to be the best one yet.\n    Some quick notes:\n  </p>\n\n  <ul>\n    <li>\n      Definitely agree that we should double the coffee budget this\n      year (it really is impressive how much we go through!)\n    </li>\n    <li>\n      A blimp would definitely make the venue very easy to find, but\n      I think it might be a bit out of our budget. Maybe we could\n      rent some spotlights instead?\n    </li>\n    <li>\n      We absolutely will need more hamster wheels, last year's line\n      was <em>way</em> too long. Will get on that now before rental\n      season hits its peak.\n    </li>\n  </ul>\n\n  <p>Let me know when you've nailed down the dates!</p>\n</Message>\n```\n\nAs shown here, we can pass different content into the tag. The content\nof the tag is also referred to as _the block_. The `{{yield}}` syntax\nyields to the block once the block is passed into the component.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        You can think of the <code>Message</code> component like a function,\n        and the block as a <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\"><em>callback</em></a>\n        that you're passing to the component. From this perspective, the <code>{{yield}}</code> syntax\n        calls the callback.\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n### Conditional Blocks\n\nSometimes, we may want to provide some default content if the user of a component\nhasn't provided a block. For instance, consider an error message dialog that has\na default message in cases where we don't know what error occurred. We could show\nthe default message using the `(has-block)` syntax in an `ErrorDialog` component.\n\n```handlebars {data-filename=app/components/error-dialog.hbs}\n<dialog>\n  {{#if (has-block)}}\n    {{yield}}\n  {{else}}\n    An unknown error occurred!\n  {{/if}}\n</dialog>\n```\n\nNow, if we use our `ErrorDialog` component without a block, we'll get the\ndefault message.\n\n```handlebars\n<ErrorDialog/>\n```\n```html\n<!-- rendered -->\n<dialog>\n  An unknown error occurred!\n</dialog>\n```\n\nIf we had a more detailed message, though, we could use the block to pass it to\nthe dialog.\n\n```handlebars\n<ErrorDialog>\n  <Icon type=\"no-internet\" />\n  <p>You are not connected to the internet!</p>\n</ErrorDialog>\n```\n\n## Block Parameters\n\nBlocks can also pass values back into the template, similar to a callback\nfunction in JavaScript. Consider for instance a simple `BlogPost` component.\n\n```handlebars {data-filename=app/components/blog-post.hbs}\n<h1>{{@post.title}}</h1>\n<h2>{{@post.author}}</h2>\n\n{{@post.body}}\n```\n\n```handlebars\n<!-- usage -->\n<BlogPost @post={{@blogPost}} />\n```\n\nWe may want to give the user the ability to put extra content before or after\nthe post, such as an image or a profile. Since we don't know what the\nuser wants to do with the body of the post, we can instead pass the body back\nto them.\n\n```handlebars {data-filename=app/components/blog-post.hbs}\n<h1>{{@post.title}}</h1>\n<h2>{{@post.author}}</h2>\n\n{{yield @post.body}}\n```\n\n```handlebars\n<!-- usage -->\n<BlogPost @post={{@blogPost}} as |postBody|>\n  <img alt=\"\" role=\"presentation\" src=\"./blog-logo.png\">\n\n  {{postBody}}\n\n  <AuthorBio @author={{@blogPost.author}} />\n</BlogPost>\n```\n\nWe can yield back multiple values as well, separated by spaces.\n\n```handlebars {data-filename=app/components/blog-post.hbs}\n{{yield @post.title @post.author @post.body }}\n```\n\n```handlebars\n<!-- usage -->\n<BlogPost @post={{@blogPost}} as |postTitle postAuthor postBody|>\n  <img alt=\"\" role=\"presentation\" src=\"./blog-logo.png\">\n\n  {{postTitle}}\n\n  {{postBody}}\n\n  <AuthorBio @author={{postAuthor}} />\n</BlogPost>\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Component templates can leave one or more placeholders that users can fill with their own HTML. These are called blocks. Here's an example that provides a component with the implicit default block. \n\n<ExampleComponent> This is the default <b>block..."}}}