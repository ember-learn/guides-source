{"data":{"type":"contents","id":"components/conditional-content","attributes":{"content":"In a template, you can use `if` to conditionally render content.\nThere are 2 styles of `if`: **block** and **inline**.\n\n```handlebars\n{{#if this.thingIsTrue}}\n  Content for the block form of \"if\"\n{{/if}}\n\n<div class={{if this.thingIsTrue \"value-if-true\" \"value-if-false\"}}>\n  This div used the inline \"if\" to calculate the class to use.\n</div>\n```\n\nAdditionally, you can use template helpers like `concat` within a conditional. For the example below, if `@color` has a truthy value, such as `'navy'`, the div classes will include `badge-navy`:\n\n```handlebars\n<div class=\"badge {{if @color (concat 'badge-' @color)}}\">\n  Badge Text\n</div>\n```\n\n## Block `if`\n\n### Motivation\n\nLet's take a look at two components that display a person's username.\n\n```handlebars {data-filename=\"app/components/received-message/username.hbs\"}\n<h4 class=\"username\">\n  Tomster\n  <span class=\"local-time\">their local time is 4:56pm</span>\n</h4>\n```\n\n```handlebars {data-filename=\"app/components/sent-message/username.hbs\"}\n<h4 class=\"username\">\n  Zoey\n</h4>\n```\n\nThe components look similar, don't they?\nThe first component shows extra information about the user's local time.\n\nLet's say we tried to create a single `username` component.\n\n```handlebars {data-filename=\"app/components/username.hbs\"}\n<h4 class=\"username\">\n  {{@name}}\n  <span class=\"local-time\">their local time is {{@localTime}}</span>\n</h4>\n```\n\nIf the `<Username>` tag doesn't specify a `@localTime` argument,\nwe will see an extra, incomplete text, `their local time is `, on the screen.\n\nWhat we need is a way to display the local time if `@localTime` exists.\nWe can do this with an `if`.\n\n```handlebars {data-filename=\"app/components/username.hbs\"}\n<h4 class=\"username\">\n  {{@name}}\n  {{#if @localTime}}\n    <span class=\"local-time\">their local time is {{@localTime}}</span>\n  {{/if}}\n</h4>\n```\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <p>\n          Just like in JavaScript, <code>0</code>, <code>false</code>,\n          <code>null</code>, <code>undefined</code>, and\n          the empty string are falsy in Ember templates.\n          Unlike in JavaScript, the empty array is also considered falsy in Ember templates.\n        </p>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n### Usage\n\n```handlebars {data-filename=\"app/components/my-component.hbs\"}\n{{#if condition}}\n  {{!-- some content --}}\n{{/if}}\n```\n\nThis is the syntax for an `if` statement in block form.\nIf the `condition` is true, Ember will render the content that is inside the block.\n\nLike many programming languages, Ember also allows you to write `if else` and\n`if else if` statements in a template.\n\n```handlebars {data-filename=\"app/components/my-component.hbs\"}\n{{#if condition}}\n  {{!-- some content --}}\n{{else}}\n  {{!-- some other content --}}\n{{/if}}\n\n{{#if condition1}}\n  ...\n{{else if condition2}}\n  ...\n{{else if condition3}}\n  ...\n{{else}}\n  ...\n{{/if}}\n```\n\n\n## Inline `if`\n\n### Motivation\n\nSometimes, you will want to conditionally set an argument or attribute.\n\nFor instance, consider two components that display a user's avatar.\nOne is for a recipient and the other for a sender.\n\n```handlebars {data-filename=\"app/components/received-message/avatar.hbs\"}\n<aside>\n  <div\n    class=\"avatar is-active\"\n    title=\"Tomster's avatar\"\n  >\n    T\n  </div>\n</aside>\n```\n\n```handlebars {data-filename=\"app/components/sent-message/avatar.hbs\"}\n<aside class=\"current-user\">\n  <div\n    class=\"avatar\"\n    title=\"Zoey's avatar\"\n  >\n    Z\n  </div>\n</aside>\n```\n\nAgain, the two components look similar.\nThe first component has an `is-active` class, while the second a `current-user` class.\nHow should we unify the components into one?\n\nThe `is-active` class is responsible for showing the active icon.\n_How_ that icon is rendered may change over time,\nso we won't use `...attributes` to apply the `is-active` class.\nInstead, we'll pass the argument `@isActive` to dictate _what_ to do (e.g. render the icon).\n\nAs for the `current-user` class, it may have been just one of a few classes\nthat can be applied to the `<aside>` element.\nLet's use `...attributes` to apply the `current-user` class.\n\nWe take these API designs into account and end up with a reusable component.\nThe component uses an inline `if` to conditionally apply the `is-active` class.\n\n```handlebars {data-filename=\"app/components/avatar.hbs\"}\n<aside ...attributes>\n  <div\n    class=\"avatar {{if @isActive \"is-active\"}}\"\n    title={{@title}}\n  >\n    {{@initial}}\n  </div>\n</aside>\n```\n\nAfterwards, we can refactor the initial components.\n\n```handlebars {data-filename=\"app/components/received-message/avatar.hbs\"}\n<Avatar\n  @isActive={{true}}\n  @title=\"Tomster's avatar\"\n  @initial=\"T\"\n/>\n```\n\n```handlebars {data-filename=\"app/components/sent-message/avatar.hbs\"}\n<Avatar\n  class=\"current-user\"\n  @title=\"Zoey's avatar\"\n  @initial=\"Z\"\n/>\n```\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <p>\n          When passing a literal JavaScript value to a component,\n          we have to wrap the value in double curlies (e.g. <code>@isActive={{true}}</code>).\n          A value that isn't wrapped in curlies is assigned as string,\n          which matches the behavior in HTML attributes.\n          For example, writing <code>@isActive=true</code> will set <code>@isActive</code> to the string <code>'true'</code>.\n        </p>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n### Usage\n\n```handlebars {data-filename=\"app/components/my-component.hbs\"}\n{{if condition value}}\n```\n\nThis is the syntax for an `if` statement in inline form.\nIf the `condition` is true, Ember will use `value` at the invocation site.\n\nEmber also allows you to write an `if else` statement in inline form.\nIt looks similar to a ternary operator.\n\n```handlebars {data-filename=\"app/components/my-component.hbs\"}\n{{if condition value1 value2}}\n```\n\n\n## Learn More\n\nPlease see the [API documentation of the `if` helper](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/if?anchor=if) for more patterns.","description":"In a template, you can use if to conditionally render content. There are 2 styles of if: block and inline. \n\n{{#if this.thingIsTrue}} Content for the block form of \"if\" {{/if}} <div class={{if this.thingIsTrue \"value-if-true\" \"value-if-false\"}}> This div..."}}}