{"data":{"type":"contents","id":"getting-started/quick-start","attributes":{"content":"Welcome to Ember! Follow this guide to build a simple web app using HTML, JavaScript, the command line, and some of Ember's best features.\nEach step has code you can copy and paste directly or modify to make it your own.\nAlong the way, you will be introduced to the Ember community so that you know who to ask for help and how to continue your learning journey.\n\nWe'll cover these steps:\n\n1. Installing Ember.\n2. Creating a new application.\n3. Defining a route.\n4. Writing a UI component.\n5. Building your app to be deployed to production.\n6. Deploying your app to Netlify.\n\n## Install Ember\n\nYou can install Ember with a single command using npm,\nthe Node.js package manager.\nType this into your terminal:\n\n```bash\nnpm install -g ember-cli\n```\n\nDon't have npm? [Learn how to install Node.js and npm here](https://docs.npmjs.com/getting-started/installing-node).\nFor a full list of dependencies necessary for an Ember CLI project, visit the [Ember CLI Guides - Installing](https://cli.emberjs.com/release/basic-use/).\n\n## Create a New Application\n\nOnce you've installed Ember CLI via npm,\nyou will have access to a new `ember` command in your terminal.\nYou can use the `ember new` command to create a new application.\n\n```bash\nember new ember-quickstart --lang en\n```\n\nThis one command will create a new directory called `ember-quickstart` and set up a new Ember application inside of it.\nThe `--lang en` option sets the app's primary language to English to help improve [accessibility](../../accessibility/application-considerations/).\nOut of the box, your application will include:\n\n* A development server.\n* Template compilation.\n* JavaScript and CSS minification.\n* Modern features via Babel.\n\nBy providing everything you need to build production-ready web applications in an integrated package,\nEmber makes starting new projects a breeze.\n\nLet's make sure everything is working properly.\n`cd` into the application directory `ember-quickstart` and start the development server by typing:\n\n```bash\ncd ember-quickstart\nember serve\n```\n\nAfter a few seconds, you should see output that looks like this:\n\n```text\nLivereload server on http://localhost:7020\nServing on http://localhost:4200/\n```\n\n(To stop the server at any time, type Ctrl-C in your terminal.)\n\nOpen [`http://localhost:4200`](http://localhost:4200) in your browser of choice.\nYou should see an Ember welcome page and not much else.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        If you are having trouble getting this running, other Ember developers would be happy to help!\n        Visit <a href=\"https://emberjs.com/community/\"> The Ember Community Page</a> to join chat groups or forums.\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\nCongratulations! You just created and booted your first Ember app.\n\n## Write some HTML in a template\n\nWe will start by editing the `application` template.\nThis template is always on screen while the user has your application loaded.\nIn your editor, open `app/templates/application.hbs` and change it to the following:\n\n```handlebars {data-filename=app/templates/application.hbs}\n<h1>PeopleTracker</h1>\n\n{{outlet}}\n```\n\nEmber detects the changed file and automatically reloads the page for you in the background.\nYou should see that the welcome page has been replaced by \"PeopleTracker\".\nYou also added an `{{outlet}}` to this page,\nwhich means that any route will be rendered in that place.\n\n## Define a Route\n\nLet's build an application that shows a list of scientists.\nTo do that, the first step is to create a route.\nFor now, you can think of routes as being the different pages that make up your application.\n\nEmber comes with _generators_ that automate the boilerplate code for common tasks.\nTo generate a route, type this in a new terminal window in your `ember-quickstart` directory:\n\n```bash\nember generate route scientists\n```\n\nYou'll see output like this:\n\n```text\ninstalling route\n  create app/routes/scientists.js\n  create app/templates/scientists.hbs\nupdating router\n  add route scientists\ninstalling route-test\n  create tests/unit/routes/scientists-test.js\n```\n\nThat is Ember telling you that it has created:\n\n1. A template to be displayed when the user visits `/scientists`.\n2. A `Route` object that fetches the model used by that template.\n3. An entry in the application's router (located in `app/router.js`).\n4. A unit test for this route.\n\nOpen the newly-created template in `app/templates/scientists.hbs` and add the following HTML:\n\n```handlebars {data-filename=app/templates/scientists.hbs}\n{{page-title \"Scientists\"}}\n<h2>List of Scientists</h2>\n```\n\nIn your browser, open [`http://localhost:4200/scientists`](http://localhost:4200/scientists).\nYou should see the `<h2>` we put in the `scientists.hbs` template right below the `<h1>` from our `application.hbs` template.\n\nSince the scientist route is nested under the application route, Ember will render its content inside the application route template's `{{outlet}}` directive.\n\nNow that we've got the `scientists` template rendering,\nlet's give it some data to render.\nWe do that by specifying a _model_ for that route,\nand we can specify a model by editing `app/routes/scientists.js`.\n\nWe'll take the code created for us by the generator and add a `model()` method to the `Route`:\n\n```javascript {data-filename=\"app/routes/scientists.js\"}\nimport Route from '@ember/routing/route';\n\nexport default class ScientistsRoute extends Route {\n  model() {\n    return ['Marie Curie', 'Mae Jemison', 'Albert Hofmann'];\n  }\n}\n```\n\nThis code example uses a feature of JavaScript called classes.\nLearn more with this [overview of the latest JavaScript features](https://ponyfoo.com/articles/es6).\n\nIn a route's `model()` method, you return whatever data you want to make available to the template.\nIf you need to fetch data asynchronously,\nthe `model()` method supports any library that uses [JavaScript Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\nNow let's tell Ember how to turn that array of strings into HTML.\nOpen the `scientists` template and add the following code to loop through the array and print it:\n\n```handlebars {data-filename=\"app/templates/scientists.hbs\"}\n<h2>List of Scientists</h2>\n\n<ul>\n  {{#each @model as |scientist|}}\n    <li>{{scientist}}</li>\n  {{/each}}\n</ul>\n```\n\nHere, we use the `each` _helper_ to loop over each item in the array we\nprovided from the `model()` hook. Ember will render the _block_ contained\ninside the `{{#each}}...{{/each}}` helper once for each item (each scientist in\nour case) in the array. The item (the scientist) that is being rendered\ncurrently will be made available in the `scientist` variable, as denoted by\n`as |scientist|` in the `each` helper.\n\nThe end result is that there will be one `<li>` element corresponding to each\nscientist in the array inside the `<ul>` unordered list.\n\n## Create a UI Component\n\nAs your application grows, you will notice you are sharing UI elements between multiple pages,\nor using them multiple times on the same page.\nEmber makes it easy to refactor your templates into reusable components.\n\nLet's create a `<PeopleList>` component that we can use in multiple places to show a list of people.\n\nAs usual, there's a generator that makes this easy for us.\nMake a new component by typing:\n\n```bash\nember generate component people-list\n```\n\nCopy and paste the `scientists` template into the `<PeopleList>` component's template and edit it to look as follows:\n\n```handlebars {data-filename=app/components/people-list.hbs}\n<h2>{{@title}}</h2>\n\n<ul>\n  {{#each @people as |person|}}\n    <li>{{person}}</li>\n  {{/each}}\n</ul>\n```\n\nNote that we've changed the title from a hard-coded string (\"List of Scientists\")\nto `{{@title}}`. The `@` indicates that `@title` is an argument that will be\npassed into the component, which makes it easier to reuse the same component in\nother parts of the app we are building.\n\nWe've also renamed `scientist` to the more-generic `person`,\ndecreasing the coupling of our component to where it's used.\n\nOur component is called `<PeopleList>`, based on its name on the file system. Please note that the letters P and L are capitalized.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        A component's name is derived from its file name.\n        We capitalize the first letter and every letter after <code>-</code>, then remove the hyphens.\n        This is known as pascal case.\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\nSave this template and switch back to the `scientists` template.\n\nWe're going to tell our component:\n\n1. What title to use, via the `@title` argument.\n2. What array of people to use, via the `@people` argument. We'll\n   provide this route's `@model` as the list of people.\n\nWe'll need to make some changes to the code we wrote before.\n\nIn the rest of the code examples in this tutorial, whenever we add or remove code, we will show a \"diff.\" The lines you need to remove have a minus sign in front of them, and the lines you should add have a plus sign. If you are using a screen reader while you go through the Guides, we recommend using Firefox and NVDA or Safari and VoiceOver for the best experience.\n\nLet's replace all our old code with our new componentized version:\n\n```handlebars {data-filename=\"app/templates/scientists.hbs\" data-diff=\"-1,-2,-3,-4,-5,-6,-7,+8,+9,+10,+11\"}\n<h2>List of Scientists</h2>\n\n<ul>\n  {{#each @model as |scientist|}}\n    <li>{{scientist}}</li>\n  {{/each}}\n</ul>\n<PeopleList \n  @title=\"List of Scientists\" \n  @people={{@model}} \n/>\n```\n\nGo back to your browser and you should see that the UI looks identical.\nThe only difference is that now we've componentized our list into a version that's more reusable and more maintainable.\n\nYou can see this in action if you create a new route that shows a different list of people.\nAs an additional exercise (that we won't cover),\nyou can try to create a `programmers` route that shows a list of famous programmers.\nIf you re-use the `<PeopleList>` component, you can do it with almost no code at all.\n\n## Responding to user interactions\n\nSo far, our application is listing data, but there is no way for the user to\ninteract with the information. In web applications we often want to respond to\nuser actions like clicks or hovers. Ember makes this easy to do.\n\nFirst, we can modify the `<PeopleList>` component to include a button:\n\n```handlebars {data-filename=\"app/components/people-list.hbs\"}\n<h2>{{@title}}</h2>\n\n<ul>\n  {{#each @people as |person|}}\n    <li>\n      <button type=\"button\">{{person}}</button>\n    </li>\n  {{/each}}\n</ul>\n```\n\nNow that we have a button, we need to wire it up to do _something_ when a user\nclicks on it. For simplicity, let's say we want to show an `alert` dialog with\nthe person's name when the button is clicked.\n\nSo far, our `<PeopleList>` component is purely presentational – it takes some\ninputs as arguments and renders them using a template. To introduce _behavior_\nto our component – handling the button click in this case, we will need to\nattach some _code_ to the component.\n\nIn addition to the template, a component can also have a JavaScript file for\nthis exact purpose. Go ahead and create a `.js` file with the same name and in\nthe same directory as our template (`app/components/people-list.js`),\nand paste in the following content:\n\n```javascript {data-filename=\"app/components/people-list.js\"}\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class PeopleListComponent extends Component {\n  @action\n  showPerson(person) {\n    alert(`The person's name is ${person}!`);\n  }\n}\n```\n\n_Note: If you want this file created for you, you may pass the `-gc` flag when running the component generator._\n\nHere, we created a basic component class and added a method that accepts a\nperson as an argument and brings up an alert dialog with their name. The\n`@action` _decorator_ indicates we want to use this method as an _action_\nin our template, in response to user interaction.\n\nNow that we have implemented the desired behavior, we can go back to\nthe component's template and wire everything up:\n\n```handlebars {data-filename=\"app/components/people-list.hbs\" data-diff=\"-6,+7\"}\n<h2>{{@title}}</h2>\n\n<ul>\n  {{#each @people as |person|}}\n    <li>\n      <button type=\"button\">{{person}}</button>\n      <button type=\"button\" {{on 'click' this.showPerson}}>{{person}}</button>\n    </li>\n  {{/each}}\n</ul>\n```\n\nHere, we used the `on` _modifier_ to attach the `this.showPerson` action to\nthe button in the template.\n\nThere is a problem with this though – if you tried this in the browser, you\nwill quickly discover that clicking on the buttons will bring up an alert\ndialog that said \"The person's name is `[Object MouseEvent]`!\" – eek!\n\nThe cause of this bug is that we wrote our action to take an argument – the\nperson's name – and we forgot to pass it. The fix is easy enough:\n\n```handlebars {data-filename=\"app/components/people-list.hbs\" data-diff=\"-6,+7\"}\n<h2>{{@title}}</h2>\n\n<ul>\n  {{#each @people as |person|}}\n    <li>\n      <button type=\"button\" {{on 'click' this.showPerson}}>{{person}}</button>\n      <button type=\"button\" {{on 'click' (fn this.showPerson person)}}>{{person}}</button>\n    </li>\n  {{/each}}\n</ul>\n```\n\nInstead of passing the action to the `on` modifier directly, we used the `fn`\nhelper to pass the `person` as an argument which our action expects.\n\nFeel free to try this in the browser. Finally, everything should behave exactly\nas we hoped!\n\n## Building For Production\n\nNow that we've written our application and verified that it works in development,\nit's time to get it ready to deploy to our users.\n\nTo do so, run the following command:\n\n```bash\nember build --environment=production\n```\n\nThe `build` command packages up all of the assets that make up your\napplication&mdash;JavaScript, templates, CSS, web fonts, images, and\nmore.\n\nIn this case, we told Ember to build for the production environment via the `--environment` flag.\nThis creates an optimized bundle that's ready to upload to your web host.\nOnce the build finishes,\nyou'll find all of the concatenated and minified assets in your application's `dist/` directory.\n\nThe Ember community values collaboration and building common tools that everyone relies on.\nIf you're interested in deploying your app to production in a fast and reliable way,\ncheck out the [Ember CLI Deploy](http://ember-cli-deploy.com/) addon.\n\nIf you deploy your application to an Apache web server, first create a new virtual host for the application.\nTo make sure all routes are handled by `index.html`,\nadd the following directive to the application's virtual host configuration:\n\n```apacheconf\nFallbackResource index.html\n```\n\n## Deploying your app to Netlify\n\n[Netlify](http://netlify.com/products) is a one of many ways to deploy your app to the web so you can share it with others!\n\n![About Netlify](/images/quick-guide/netlify/netlify-product.png)\n\nWhy Netlify?\n\nIt does not require a high level of knowledge for you to deploy your website to production.\nNetlify offers a free account option and no credit card is required.\nThese Guides themselves are hosted on Netlify, while other parts of `emberjs.com` are hosted using Heroku, Fastly, GitHub pages, and AWS.\nOverall, Ember developers have many options for how they deploy their apps! Netlify is just one of the many options you have.\n\nFollowing these steps will help you get your site up and running in minutes:\n\nFirst you need to [sign up for a Netlify account](https://app.netlify.com/signup) if you do not already have one:\n\n![deploying to Netlify](/images/quick-guide/netlify/create-netlify-account.png)\n\nThe next step is to let the web app server know how to handle URLs. There are 2 ways to do so.\n\nOne, you can create a file in your `ember-quickstart/public` folder called\n`_redirects`. Add `/* /index.html 200` to the first line and save the file. \nThis will let the server know to redirect all pages to `index.html` file. \nOnce redirected, Ember.js app itself will generate the matching html for URLs such as `/scientists`.\n\nTwo, you can use an addon created by the community, such as [ember-cli-netlify](https://github.com/shipshapecode/ember-cli-netlify), to handle URLs.\n\nNow you are ready to deploy your app to production on Netlify platform. There are two ways to do this:\n\n1. Deploying to Netlify using drag and drop\n2. Deploying to Netlify using Git (specifically GitHub)\n\n**Deploying to Netlify using drag and drop**\n\nYou may need to re-create your `dist` directory to include changes made to `_redirects` file by running this command\n\n```bash\nember build --environment=production\n```\n\nOnce you are logged-in to your Netlify account and in the \"Sites\" section, you should see the Netlify drag and drop area\n\n  ![Netlify Drag and Drop Area](/images/quick-guide/netlify/drag-and-drop/02.png)\n\nNext, locate your `dist` folder on your local machine and drag and drop it into this area\n\nWhen your files have been successfully uploaded, you should see the status of your deployment in the \"Getting started\" section\n\n![Getting Started using Drag and Drop on Netlify](/images/quick-guide/netlify/drag-and-drop/03.png)\n\nOnce you see \"Your site is deployed\" as shown above, your website is now live and you can click on the link provided above the \"Getting started\" section to view your site\n\n![View your site on Netlify](/images/quick-guide/netlify/drag-and-drop/04.png)\n\nCongratulations! Your site is now live and in production!\n\n**Deploying to Netlify using Git (specifically GitHub)**\n\nMake sure you are logged-in to your Netlify account and in the \"Sites\" section\n\nClick the button that says \"New site from Git\".\n\n![Netlify Continuous Deployment Git](/images/quick-guide/netlify/github/new-site-from-git.png)\n\nClick the \"GitHub\" button under \"Continuous Deployment\" to connect to your GitHub account. Please note you will be taken to a series of GitHub login screens and asked to select your GitHub preferences related to Netlify\n\n![Netlify choose your GitHub repository to deploy](/images/quick-guide/netlify/github/connect-to-github.png)\n\nOnce you have successfully connected your GitHub account with Netlify, you should see a list of repositories to choose from. Select or search for your GitHub repository that you wish to deploy\n\n![Netlify Ember Default Deploy Settings](/images/quick-guide/netlify/github/select-github-repo.png)\n\nIf you have successfully selected your repo and it is an Ember application, Netlify will automatically generate the deploy settings as shown below. These instructions assume you do not want to change any of the default settings generated by Netlify. So if everything looks good to you, go ahead and click the \"Deploy site\" button\n\n![Netlify GitHub Deploy Overview](/images/quick-guide/netlify/github/github-create-new-site.png)\n\nOnce you click the \"Deploy site\" button, you will be taken to your website \"Overview\" and you should see the status of your deployment\n\n![Netlify GitHub Deploy Confirmation](/images/quick-guide/netlify/github/github-deploy-confirmation.png)\n\nOnce you see \"Your site is deployed\" as shown above, your website is now live and you can click on the link provided above the \"Getting started\" section to view your site\n\n![View your site on Netlify](/images/quick-guide/netlify/github/github-live.png)\n\nCongratulations! Your site is now live and in production!\n  \n## Next steps\n\nNow that your app is deployed, what should you do next?\n\n### Advance to the next level\n\nThere is an official, free tutorial here in the Guides that delves deeper into some of the features you used today.\n[Give it a try!](../../tutorial/part-1/)\n\n### Explore the ecosystem\n\nNow that you have the basics down, are you feeling creative and adventurous?\nThe Ember community has created hundreds of addons that you can use for free in your app.\nAddons let you quickly add features like calendars, navbars, payments, authentication, themes, and more.\nVisit [Ember Observer](https://emberobserver.com) to browse the possibilities!\n\n### Style it up\n\nThat app we made is a bit plain. Do you know any CSS? Put your styles in `app/styles/app.css`, which is automatically included in your app build.\n\n### Connect with the Ember Community\n\nOne thing that makes Ember special is that every app you create has a _lot_ in common with apps that other people have made.\nThis means that chances are good that you can connect with other developers who share both your interests and technical challenges.\nVisit the [Ember Community page](https://emberjs.com/community/) to learn about the ways you can get connected. Find a nearby meetup, ask questions, follow a newsletter, and more!\nWe hope to see you around!","description":"Welcome to Ember! Follow this guide to build a simple web app using HTML, JavaScript, the command line, and some of Ember's best features. Each step has code you can copy and paste directly or modify to make it your own. Along the way, you will be..."}}}