{"data":{"type":"contents","id":"getting-started/anatomy-of-an-ember-app","attributes":{"content":"Before you start writing any Ember code, it's a good idea to get an overview of how an\nEmber application works.\n\n![ember core concepts](/images/ember-core-concepts/ember-core-concepts.svg)\n\n## Router and Route Handlers\n\nImagine we are writing a web app for a site that lets users list their properties to rent. At any given time, we should be able to answer questions about the current state like _What rental are they looking at?_ and _Are they editing it?_ In Ember, the answer to these questions is determined by the URL.\nThe URL can be set in a few ways:\n\n* The user loads the app for the first time.\n* The user changes the URL manually, such as by clicking the back button or by editing the address bar.\n* The user clicks a link within the app.\n* Some other event in the app causes the URL to change.\n\nNo matter how the URL gets set, the first thing that happens is that the Ember router maps the URL to a route handler.\n\nThe route handler then typically does two things:\n\n* It loads a model.\n* It renders a template, which has access to the model.\n\n## Models\n\nModels represent persistent state.\n\nFor example, a property rentals application would want to save the details of\na rental when a user publishes it, and so a rental would have a model defining\nits details, perhaps called the _rental_ model. You may also need a _user_\nmodel to keep track of who is currently logged in.\n\nA model typically persists information to a web server, although models can be\nconfigured to save to anywhere else, such as the browser's Local Storage.\n\nBy default new Ember apps include [Ember Data](../../models/), which is a\nseparate data library that integrates with Ember and provides a solid,\nconventional model layer. We'll see Ember Data in action in the tutorial in\nthe next section.\n\nYou can also provide your own model layer using other data libraries such as\n[Redux](https://github.com/ember-redux/ember-redux) or\n[Apollo](https://github.com/ember-graphql/ember-apollo-client), or create your\nown model layer using the tools that Ember provides for state, such as\n[autotracking](../../components/component-state-and-actions/). We'll learn more\nabout these tools throughout the guides.\n\n## Templates\n\nEmber uses templates to build up the user interface in an application.\n\nIf you have written HTML before, you already know how to write a basic Ember\ntemplate. For example:\n\n```handlebars {data-filename=\"app/templates/welcome.hbs\"}\n<div>Hi, this is a valid Ember template!</div>\n```\n\nIn addition to static HTML content, Ember uses the syntax of [Handlebars](http://handlebarsjs.com)\nto describe dynamic user interface elements.\n\nFor example, as mentioned before, the route handler makes the model available\nto its template:\n\n```handlebars {data-filename=\"app/templates/welcome.hbs\"}\n{{!-- The model for this route is the current user --}}\n\n<div>\n  Hi <img src=\"{{@model.profileImage}}\" alt=\"{{@model.name}}'s profile picture\"> {{@model.name}},\n  this is a valid Ember template!\n</div>\n\n{{#if @model.isAdmin}}\n  <div>Remember, with great power comes great responsibility!</div>\n{{/if}}\n```\n\nThis example combines several Handlebars features to create a personalized\nexperience for the user, something we couldn't do with just static HTML alone.\nWe used the comment syntax (`{{!-- ... --}}`) to leave a note for future\ndevelopers, the double curly braces syntax (`{{...}}`) to include dynamic\nvalues, as well as using the `{{#if}}...{{/if}}` syntax to conditionally render\nsome extra content.\n\nWe will go into more details about each of these template features later on in\nthis guide.\n\n## Components\n\nComponents allow you to break up your templates and organize them into small,\nself-contained and reusable pieces.\n\nIn its most basic form, a component is just a piece of template that can be\nreferred to by name. Similar to functions in programming languages, they can\nalso take _arguments_, allowing them to be customized to the specific context\nthey are being rendered into.\n\nFor example, the example in the previous section is getting a bit long. We can\n_extract_ the snippet for rendering the user's name and profile picture into\nits own component:\n\n```handlebars {data-filename=\"app/components/user-profile.hbs\"}\n<img src=\"{{@user.profileImage}}\" alt=\"{{@user.name}}'s profile picture\"> {{@user.name}}\n```\n\nDoing this allows us to simplify the original template like so:\n\n```handlebars {data-filename=\"app/templates/welcome.hbs\"}\n{{!-- The model for this route is the current user --}}\n\n<div>\n  Hi <UserProfile @user={{@model}} /> this is a valid Ember template!\n</div>\n\n{{#if @model.isAdmin}}\n  <div>Remember, with great power comes great responsibility!</div>\n{{/if}}\n```\n\nNot only did we clean up the original template to be more readable, we now\nhave a `<UserProfile>` component that we can reuse whenever we need to render\ninformation about a given user.\n\nYou can think of components as Ember's way for letting you create your own HTML\ntags. In addition to rendering content, components can also have JavaScript\ncode associated with them, allowing you to add _behavior_, such as responding\nto a user clicking on your component.\n\nWe will cover these advanced component features in a later chapter. For now,\nlet's see these core concepts in action by building a property rental\napplication in the next lesson.","description":"Before you start writing any Ember code, it's a good idea to get an overview of how an Ember application works. \n\n Router and Route Handlers \n\nImagine we are writing a web app for a site that lets users list their properties to rent. At any given time, we..."}}}