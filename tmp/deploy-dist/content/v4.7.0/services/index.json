{"data":{"type":"contents","id":"services/index","attributes":{"content":"A [`Service`](https://api.emberjs.com/ember/release/classes/Service) is an Ember object that lives for the duration of the application, and can be made available in different parts of your application.\n\nServices are useful for features that require shared state or persistent connections. Example uses of services might\ninclude:\n\n* User/session authentication.\n* Geolocation.\n* WebSockets.\n* Server-sent events or notifications.\n* Server-backed API calls that may not fit Ember Data.\n* Third-party APIs.\n* Logging.\n\n### Defining Services\n\nServices can be generated using Ember CLI's `service` generator.\nFor example, the following command will create the `ShoppingCart` service:\n\n```bash\nember generate service shopping-cart\n```\n\nServices must extend the [`Service`](https://api.emberjs.com/ember/release/classes/Service) base class:\n\n```javascript {data-filename=app/services/shopping-cart.js}\nimport Service from '@ember/service';\n\nexport default class ShoppingCartService extends Service {\n}\n```\n\nLike any Ember object, a service is initialized and can have properties and methods of its own.\nBelow, the shopping cart service manages an items array that represents the items currently in the shopping cart.\n\n```javascript {data-filename=app/services/shopping-cart.js}\nimport { A } from '@ember/array';\nimport Service from '@ember/service';\n\nexport default class ShoppingCartService extends Service {\n  items = A([]);\n\n  add(item) {\n    this.items.pushObject(item);\n  }\n\n  remove(item) {\n    this.items.removeObject(item);\n  }\n\n  empty() {\n    this.items.clear();\n  }\n}\n```\n\n### Accessing Services\n\nTo access a service,\nyou can inject it into any container-resolved object such as a component or another service using the `service` decorator from the `@ember/service` module.\nThere are two ways to use this decorator.\nYou can either invoke it with no arguments, or you can pass it the registered name of the service.\nWhen no arguments are passed, the service is loaded based on the name of the decorated property.\nYou can load the shopping cart service with no arguments like below.\n\n```javascript {data-filename=app/components/cart-contents.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\n\nexport default class CartContentsComponent extends Component {\n  // Will load the service defined in: app/services/shopping-cart.js\n  @service shoppingCart;\n}\n```\n\nThis injects the shopping cart service into the component and makes it available as the `shoppingCart` property.\n\nAnother way to inject a service is to provide the name of the service as an argument to the decorator.\n\n```javascript {data-filename=app/components/cart-contents.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\n\nexport default class CartContentsComponent extends Component {\n  // Will load the service defined in: app/services/shopping-cart.js\n  @service('shopping-cart') cart;\n}\n```\n\nThis injects the shopping cart service into the component and makes it available as the `cart` property.\n\nSometimes a service may or may not exist, like when an initializer conditionally registers a service.\nSince normal injection will throw an error if the service doesn't exist,\nyou must look up the service using Ember's [`getOwner`](https://api.emberjs.com/ember/release/classes/@ember%2Fapplication/methods/getOwner?anchor=getOwner) instead.\n\n```javascript {data-filename=app/components/cart-contents.js}\nimport Component from '@glimmer/component';\nimport { getOwner } from '@ember/application';\n\nexport default class CartContentsComponent extends Component {\n  // Will load the service defined in: app/services/shopping-cart.js\n  get cart() {\n    return getOwner(this).lookup('service:shopping-cart');\n  }\n}\n```\n\nInjected properties are lazy loaded; meaning the service will not be instantiated until the property is explicitly called.\n\nOnce loaded, a service will persist until the application exits.\n\nBelow we add a remove action to the `cart-contents` component.\n\n```javascript {data-filename=app/components/cart-contents.js}\nimport Component from '@glimmer/component';\nimport { service } from '@ember/service';\nimport { action } from '@ember/object';\n\nexport default class CartContentsComponent extends Component {\n  @service('shopping-cart') cart;\n\n  @action\n  remove(item) {\n    this.cart.remove(item);\n  }\n}\n```\n\nOnce injected into a component, a service can also be used in the template.\nNote `cart` being used below to get data from the cart.\n\n```handlebars {data-filename=app/components/cart-contents.hbs}\n<ul>\n  {{#each this.cart.items as |item|}}\n    <li>\n      {{item.name}}\n      <button type=\"button\" {{on \"click\" (fn this.remove item)}}>Remove</button>\n    </li>\n  {{/each}}\n</ul>\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"A Service is an Ember object that lives for the duration of the application, and can be made available in different parts of your application. \n\nServices are useful for features that require shared state or persistent connections. Example uses of services..."}}}