{"data":{"type":"contents","id":"glossary/index","attributes":{"content":"Joining a web development community can be a challenge within itself, especially when all the resources you visit assume you're familiar with other technologies that you're not familiar with.\n\nOur goal is to help you avoid that mess and come up to speed as fast as possible; you can consider us your internet friend.\n\n## CDN\nContent Delivery Network\n\nThis is typically a paid service you can use to get great performance for your app. Many CDNs act as caching proxies to your origin server; some require you to upload your assets to them. They give you a URL for each resource in your app. This URL will resolve differently for folks depending on where they're browsing.\n\nBehind the scenes, the CDN will distribute your content geographically with the goal of end-users being able to fetch your content with the lowest latency possible. For example, if a user is in India, they'd likely get content served from India faster than from the United States.\n\n\n## CoffeeScript, TypeScript\nThese are both languages that compile to JavaScript. You're able to write your code using the syntax they offer and when ready you compile your TypeScript or CoffeeScript into JavaScript.\n\n[CoffeeScript vs TypeScript](http://www.stoutsystems.com/articles/coffeescript-versus-typescript/)\n\n\n## CRUD\nCreate, Read, Update, and Destroy\n\nThese are changes that could be made to data on a server. Ember data adapters define what these requests to a server look like.\n\n[CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete)\n\n\n## Evergreen browsers\nBrowsers that update themselves (without user intervention).\n\n[Evergreen Browsers](http://tomdale.net/2013/05/evergreen-browsers/)\n\n\n## ES3, ES5, ES5.1, ES6 (aka ES2015), etc\nES stands for ECMAScript, which is the specification that JavaScript is based on. The number that follows is the version of the specification.\n\nMost browsers support at least ES5, and some even have ES6 (also known as ES2015) support. You can check each browser's support (including yours) here:\n\n* [ES5 support](http://kangax.github.io/compat-table/es5/)\n* [ES6 support](http://kangax.github.io/compat-table/es6/)\n\n[ECMAScript](https://en.wikipedia.org/wiki/ECMAScript)\n\n\n## LESS, Sass\nBoth LESS and Sass are types of CSS preprocessor markup intended to give you much more control over your CSS. During the build process, the LESS or Sass resources compile down to vanilla CSS (which can be executed in a browser).\n\n[Sass/Less Comparison](https://gist.github.com/chriseppstein/674726)\n\n\n## Linter, linting\nA validation tool which checks for common issues in your JavaScript. You'd usually use this in your build process to enforce quality in your codebase. A great example of something to check for: *making sure you've always got your semicolons*.\n\nAn example of some of the options you can configure:\n[ESLint](http://eslint.org/docs/rules/)\n[JSLint](http://jshint.com/docs/options/)\n\n\n## Polyfill\nThis is a concept that typically means providing JavaScript which tests for features that are missing (prototypes not defined, etc) and \"fills\" them by providing an implementation.\n\n\n## Promise\nAsynchronous calls typically return a promise (or deferred). This is an object which has a state: it can be given handlers for when it's fulfilled or rejected.\n\nEmber makes use of these in places like the model hook for a route. Until the promise resolves, Ember is able to put the route into a \"loading\" state.\n\n* [An open standard for sound, interoperable JavaScript promises](https://promisesaplus.com/)\n* [emberjs.com - A word on promises](../getting-started/js-primer/#toc_promises)\n\n\n## SSR\nServer-Side Rendering\n\n[Inside FastBoot: The Road to Server-Side Rendering](http://emberjs.com/blog/2014/12/22/inside-fastboot-the-road-to-server-side-rendering.html)\n\n\n## Transpile\nWhen related to JavaScript, this can be part of your build process which \"transpiles\" (converts) your ES6 syntax JavaScript to JavaScript that is supported by current browsers.\n\nBesides ES6, you'll see a lot of content about compiling/transpiling CoffeeScript, a short-hand language which can \"compile\" to JavaScript.\n\n* Ember CLI specifically uses [Babel](https://babeljs.io/) via the [ember-cli-babel](https://github.com/babel/ember-cli-babel) plugin.\n\n\n## UI\nUI stands for User Interface and is essentially what the user sees and interacts with on a device. In terms of the web, the UI is generally composed of a series of pages containing visual elements such as buttons and icons that a user can interact with to perform a specific function.\n\n\n## Shadow DOM\nNot to be confused with Virtual DOM. Shadow DOM is still a work in progress, but basically a proposed way to have an \"isolated\" DOM encapsulated within your app's DOM.\n\nCreating a re-usable \"widget\" or control might be a good use-case for this. Browsers implement some of their controls using their own version of a shadow DOM.\n\n* [W3C Working Draft](http://www.w3.org/TR/shadow-dom/)\n* [What the Heck is Shadow DOM?](http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/)\n\n\n## Virtual DOM\nNot to be confused with Shadow DOM. The concept of a virtual DOM means abstracting your code (or in our case, Ember) away from using the browser's DOM in favor of a \"virtual\" DOM that can easily be accessed for read/writes or even serialized.","description":"Joining a web development community can be a challenge within itself, especially when all the resources you visit assume you're familiar with other technologies that you're not familiar with. \n\nOur goal is to help you avoid that mess and come up to speed as..."}}}