{"data":{"type":"contents","id":"configuring-ember/index","attributes":{"content":"While Ember gives you strong defaults so that you might never need to configure anything, it still supports configuring your app if you need to! Ember CLI ships with support for managing your application's environment. The runtime environment for the application is defined in `config/environment.js`. Here an object `ENV` is built for each of the three Ember CLI-supported build modes: development, test, and production.\n\nThree notable properties on the `ENV` object are:\n\n- `EmberENV` can be used to define Ember feature flags (see the [Feature Flags guide](./feature-flags/)) to be enabled at runtime.\n- `APP` can be used to pass flags or options to the app's `Application` instance.\n- `environment` by default contains which of the build environments was selected at build time (`development`, `test`, or `production`).\n\nThe `ENV` object is defined at build time, but you can access the `ENV` object\nin application code via import from `your-application-name/config/environment`.\n\nFor example:\n\n```javascript\nimport ENV from 'your-application-name/config/environment';\n\nif (ENV.environment === 'development') {\n  // ...\n}\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"While Ember gives you strong defaults so that you might never need to configure anything, it still supports configuring your app if you need to! Ember CLI ships with support for managing your application's environment. The runtime environment for the..."}}}