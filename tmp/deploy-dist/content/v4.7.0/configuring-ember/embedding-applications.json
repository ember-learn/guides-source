{"data":{"type":"contents","id":"configuring-ember/embedding-applications","attributes":{"content":"In most cases, your application's entire UI will be created by templates\nthat are managed by the router.\n\nBut what if you have an Ember.js app that you need to embed into an\nexisting page, or run alongside other JavaScript frameworks, or serve from the\nsame domain as another app?\n\n### Changing the Root Element\n\nBy default, your application will render the [application template](../../routing/defining-your-routes/#toc_the-application-route)\nand attach it to the document's `body` element.\n\nYou can tell the application to append the application template to a\ndifferent element by specifying its `rootElement` property:\n\n```javascript {data-filename=\"app/app.js\" data-diff=\"+7\"}\nimport Application from '@ember/application';\nimport Resolver from 'ember-resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from './config/environment';\n\nexport default class App extends Application {\n  rootElement = '#app';\n  modulePrefix = config.modulePrefix;\n  podModulePrefix = config.podModulePrefix;\n  Resolver = Resolver;\n}\n\nloadInitializers(App, config.modulePrefix);\n```\n\nThis property can be specified as either an element or a\n[jQuery-compatible selector\nstring](http://api.jquery.com/category/selectors/).\n\n### Disabling URL Management\n\nYou can prevent Ember from making changes to the URL by [changing the\nrouter's `location`](../specifying-url-type/) to\n`none`:\n\n```javascript {data-filename=\"config/environment.js\" data-diff=\"-8,+9\"}\n/* eslint-env node */\n\nmodule.exports = function(environment) {\n  var ENV = {\n    modulePrefix: 'my-blog',\n    environment: environment,\n    rootURL: '/',\n    locationType: 'auto',\n    locationType: 'none',\n    …\n  };\n\n  …\n\n  return ENV;\n}\n```\n\n### Specifying a Root URL\n\nIf your Ember application is one of multiple web applications served from the same domain, it may be necessary to indicate to the router what the root URL for your Ember application is. By default, Ember will assume it is served from the root of your domain.\n\nFor example, if you wanted to serve your blogging application from `http://emberjs.com/blog/`, it would be necessary to specify a root URL of `/blog/`.\n\nThis can be achieved by configuring the `rootURL` property on `ENV`:\n\n```javascript {data-filename=\"config/environment.js\" data-diff=\"-7,+8\"}\n/* eslint-env node */\n\nmodule.exports = function(environment) {\n  var ENV = {\n    modulePrefix: 'my-blog',\n    environment: environment,\n    rootURL: '/',\n    rootURL: '/blog/',\n    locationType: 'auto',\n    …\n  };\n}\n```\n\nYou will notice that this is then used to configure your application's router:\n\n```javascript {data-filename=app/router.js}\nimport Router from '@ember/routing/router';\nimport config from './config/environment';\n\nexport default class Router extends EmberRouter {\n  location = config.locationType;\n  rootURL = config.rootURL;\n}\n\nRouter.map(function() {\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"In most cases, your application's entire UI will be created by templates that are managed by the router. \n\nBut what if you have an Ember.js app that you need to embed into an existing page, or run alongside other JavaScript frameworks, or serve from the..."}}}