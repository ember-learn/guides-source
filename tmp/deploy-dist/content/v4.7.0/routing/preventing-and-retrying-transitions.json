{"data":{"type":"contents","id":"routing/preventing-and-retrying-transitions","attributes":{"content":"During a route transition, the Ember Router passes a transition\nobject to the various hooks on the routes involved in the transition.\nAny hook that has access to this transition object has the ability\nto immediately abort the transition by calling `transition.abort()`,\nand if the transition object is stored, it can be re-attempted at a\nlater time by calling `transition.retry()`.\n\n### Preventing Transitions via `routeWillChange`\n\nWhen a transition is attempted, whether via `<LinkTo />`, `transitionTo`,\nor a URL change, a `routeWillChange` event is fired on the [`RouterService`](https://api.emberjs.com/ember/release/classes/RouterService/events). This gives each active route, starting with the leaf-most\nroute, the opportunity to decide whether or not the transition should occur.\n\nImagine your app is in a route that's displaying a complex form for the user\nto fill out and the user accidentally navigates backwards. Unless the\ntransition is prevented, the user might lose all of the progress they\nmade on the form, which can make for a pretty frustrating user experience.\n\nHere's one way this situation could be handled:\n\n```javascript {data-filename=app/routes/form.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class FormRoute extends Route {\n  @service router;\n\n  constructor() {\n    super(...arguments);\n    \n    this.router.on('routeWillChange', (transition) => {\n      if (!transition.to.find(route => route.name === this.routeName) && \n        !confirm('Are you sure you want to abandon progress?')) {\n        transition.abort();\n      }\n    });\n  }\n};\n```\n\nWhen the user clicks on a `<LinkTo />` component, or when the app initiates a\ntransition by using `transitionTo`, the transition will be aborted and the URL\nwill remain unchanged. However, if the browser back button is used to\nnavigate away from `route:form`, or if the user manually changes the URL, the\nnew URL will be navigated to before the `routeWillChange` action is\ncalled. This will result in the browser displaying the new URL, even if\n`routeWillChange` calls `transition.abort()`.\n\n### Aborting Transitions Within `model`, `beforeModel`, `afterModel`\n\nThe `model`, `beforeModel`, and `afterModel` hooks described in\n[Asynchronous Routing](../asynchronous-routing/)\neach get called with a transition object. This makes it possible for\ndestination routes to abort attempted transitions.\n\n```javascript {data-filename=app/routes/disco.js}\nimport Route from '@ember/routing/route';\n\nexport default class DiscoRoute extends Route {\n  beforeModel(transition) {\n    if (new Date() > new Date('January 1, 1980')) {\n      alert('Sorry, you need a time machine to enter this route.');\n      transition.abort();\n    }\n  }\n}\n```\n\n### Storing and Retrying a Transition\n\nAborted transitions can be retried at a later time. A common use case\nfor this is having an authenticated route redirect the user to a login\npage, and then redirecting them back to the authenticated route once\nthey've logged in.\n\n```javascript {data-filename=app/routes/some-authenticated.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class SomeAuthenticatedRoute extends Route {\n  @service router;\n\n  beforeModel(transition) {\n    if (!this.controllerFor('auth').userIsLoggedIn) {\n      let loginController = this.controllerFor('login');\n      loginController.previousTransition = transition;\n      this.router.transitionTo('login');\n    }\n  }\n}\n```\n\n```javascript {data-filename=app/controllers/login.js}\nimport Controller from '@ember/controller';\nimport { action } from '@ember/object';\nimport { service } from '@ember/service';\n\nexport default class LoginController extends Controller {\n  @service router;\n\n  @action\n  login() {\n    // Log the user in, then reattempt previous transition if it exists.\n    let previousTransition = this.previousTransition;\n    if (previousTransition) {\n      this.previousTransition = null;\n      previousTransition.retry();\n    } else {\n      // Default back to homepage\n      this.router.transitionTo('index');\n    }\n  }\n}\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"During a route transition, the Ember Router passes a transition object to the various hooks on the routes involved in the transition. Any hook that has access to this transition object has the ability to immediately abort the transition by calling..."}}}