{"data":{"type":"contents","id":"testing/unit-testing-basics","attributes":{"content":"Unit tests (as well as container tests) are generally used to test a small piece of code\nand ensure that it is doing what was intended.\nUnlike application tests, they are narrow in scope and do not require the Ember application to be running.\n\nLet's have a look at a common use case - testing a service - to understand the basic principles of testing in Ember.\nThis will set the foundation for other parts of your Ember application such as controllers, components, helpers and others.\nTesting a service is as simple as creating a container test,\nlooking up the service on the application's container and running assertions against it.\n\n### Testing Computed Properties\n\nLet's start by creating a service that has a `computedFoo` computed property\nbased on a `foo` property.\n\n```javascript {data-filename=app/services/some-thing.js}\nimport Service from '@ember/service';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class SomeThingService extends Service {\n  @tracked foo = 'bar';\n\n  get computedFoo() {\n    return `computed ${this.foo}`;\n  }\n}\n```\n\nWithin the test for this object, we'll lookup the service instance, update the `foo` property (which\nshould trigger the computed property), and assert that the logic in our\ncomputed property is working correctly.\n\n```javascript {data-filename=tests/unit/service/some-thing-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Service | some thing', function(hooks) {\n  setupTest(hooks);\n\n  test('should correctly concat foo', function(assert) {\n    const someThing = this.owner.lookup('service:some-thing');\n    someThing.foo = 'baz';\n\n    assert.equal(someThing.computedFoo, 'computed baz');\n  });\n});\n```\n\nSee that first, we are creating a new testing module using the [`QUnit.module`](http://api.qunitjs.com/QUnit/module) function.\nThis will scope all of our tests together into one group that can be configured\nand run independently from other modules defined in our test suite.\nAlso, we have used `setupTest`, one of the several test helpers provided by [ember-qunit](https://github.com/emberjs/ember-qunit).\nThe `setupTest` helper provides us with some conveniences, such as the `this.owner` object, that helps us to create or lookup objects\nwhich are needed to setup our test.\nIn this example, we use the `this.owner` object to lookup the service instance that becomes our test subject: `someThing`.\nNote that in a unit test you can customize any object under test by setting its properties accordingly.\nWe can use the `set` method of the test object to achieve this.\n\n### Testing Object Methods\n\nNext let's look at testing logic found within an object's method. In this case\nthe `testMethod` method alters some internal state of the object (by updating\nthe `foo` property).\n\n```javascript {data-filename=app/services/some-thing.js}\nimport Service from '@ember/service';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class SomeThingService extends Service {\n  @tracked foo = 'bar';\n\n  testMethod() {\n    this.foo = 'baz';\n  }\n}\n```\n\nTo test it, we create an instance of our class `SomeThing` as defined above,\ncall the `testMethod` method and assert that the internal state is correct as a\nresult of the method call.\n\n```javascript {data-filename=tests/unit/services/some-thing-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Service | some thing', function(hooks) {\n  setupTest(hooks);\n\n  test('should update foo on testMethod', function(assert) {\n    const someThing = this.owner.lookup('service:some-thing');\n\n    someThing.testMethod();\n\n    assert.equal(someThing.foo, 'baz');\n  });\n});\n```\n\nIn case the object's method returns a value, you can simply assert that the\nreturn value is calculated correctly. Suppose our object has a `calc` method\nthat returns a value based on some internal state.\n\n```javascript {data-filename=app/services/some-thing.js}\nimport Service from '@ember/service';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class SomeThingService extends Service {\n  @tracked count = 0;\n\n  calc() {\n    this.count += 1;\n    return `count: ${this.count}`;\n  }\n}\n```\n\nThe test would call the `calc` method and assert it gets back the correct value.\n\n```javascript {data-filename=tests/unit/services/some-thing-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Service | some thing', function(hooks) {\n  setupTest(hooks);\n\n  test('should return incremented count on calc', function(assert) {\n    const someThing = this.owner.lookup('service:some-thing');\n\n    assert.equal(someThing.calc(), 'count: 1');\n    assert.equal(someThing.calc(), 'count: 2');\n  });\n});\n```\n\n### Skipping tests\n\nSome times you might be working on a feature, but know that a certain test will fail so you might want to skip it.\nYou can do it by using `skip`:\n\n```javascript\nimport { test, skip } from 'qunit';\n\ntest('run this test', function(assert) {\n  assert.ok(true);\n});\n\nskip('skip this test', function(assert) {\n  assert.ok(true);\n});\n```\n\n### Stubs\n\nUnit tests are often testing methods that call other methods or work with other objects.\nA stub is a substitute method or object to be used during the test.\nThis isolates a unit test to the actual method under test.\n\n#### Stubbing a method\n\n```javascript {data-filename=app/services/some-thing.js}\nimport Service from '@ember/service';\n\nexport default class SomeThingService extends Service {\n  someComplicatedOtherMethod(x) {\n    return x * 2;\n  }\n\n  testMethod(y) {\n    let z = this.someComplicatedOtherMethod(y);\n    return `Answer: ${z}`;\n  }\n}\n```\n\n`someComplicatedOtherMethod` might have complex behavior that you do not want failing your\nunit test for `testMethod`, because you know `testMethod` works otherwise.\nIsolating unit tests is best practice because the tests that are failing should directly\npoint to the method that is failing, allowing you to quickly fix it rather than figuring\nout which method the error is in. In we stub the other method:\n\n```javascript {data-filename=tests/unit/services/some-thing-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Service | some thing', function(hooks) {\n  setupTest(hooks);\n\n  test('testMethod should return result of someComplicatedOtherFunction', function(assert) {\n    const someThing = this.owner.lookup('service:some-thing');\n    const originalSomeComplicatedOtherMethod =\n      someThing.someComplicatedOtherMethod;\n    someThing.someComplicatedOtherMethod = function() {\n      return 4;\n    };\n\n    assert.equal(someThing.testMethod(2), 'Answer 4', 'testMethod is working');\n\n    someThing.someComplicatedOtherMethod = originalSomeComplicatedOtherMethod;\n  });\n});\n```\n\n#### Stubbing an object\n\nYou can also stub an object:\n\n```javascript {data-filename=app/services/employees.js}\nimport Service from '@ember/service';\n\nexport default class EmployeesService extends Service {\n  employees = [];\n\n  hire(person) {\n    person.addJob();\n    this.employees.push(person);\n    return `${person.title} ${person.name} is now an employee`;\n  }\n}\n```\n\nHere, you need to pass a person object, which could be a complex class.\nThe `addJob` method in `Person` could be complex as well, perhaps requiring another class.\nInstead, create a simple object and pass it instead.\n\n```javascript {data-filename=tests/unit/services/employees-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Service | employees', function(hooks) {\n  setupTest(hooks);\n\n  test('hire adds a person to employees array', function(assert) {\n    const someThing = this.owner.lookup('service:some-thing');\n\n    class MockPerson {\n      title = 'Dr.';\n      name = 'Zoey';\n      addJob() {}\n    }\n\n    let person = new MockPerson();\n\n    assert.equal(someThing.hire(person), 'Dr. Zoey is now an employee');\n  });\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Unit tests (as well as container tests) are generally used to test a small piece of code and ensure that it is doing what was intended. Unlike application tests, they are narrow in scope and do not require the Ember application to be running. \n\nLet's have a..."}}}