{"data":{"type":"contents","id":"testing/testing-helpers","attributes":{"content":"_Testing helpers follows previous patterns shown in [Testing Components](../testing-components/),\nbecause helpers are rendered to templates just like components._\n\nHelpers are best tested with rendering tests, but can also be tested with unit\ntests. Rendering tests will provide better coverage for helpers, as it more\nclosely simulates the lifecycle of a helper than in isolation.\n\nWe're going to demonstrate how to test helpers by testing the `format-currency`\nhelper from [Writing Helpers](../../templates/writing-helpers/).\n\n> You can follow along by generating your own helper with `ember generate helper\n> format-currency`.\n\n```javascript {data-filename=app/helpers/format-currency.js}\nimport { helper } from '@ember/component/helper';\n\nexport function formatCurrency([value, ...rest], namedArgs) {\n  let dollars = Math.floor(value / 100);\n  let cents = value % 100;\n  let sign = namedArgs.sign === undefined ? '$' : namedArgs.sign;\n\n  if (cents.toString().length === 1) { cents = '0' + cents; }\n  return `${sign}${dollars}.${cents}`;\n}\n\nexport default helper(formatCurrency);\n```\n\nLet's start by testing the helper by showing a simple unit test and then move on\nto testing with a rendering test afterwards.\n\nHelpers are functions, which can be easily tested through `module` alone.\n\n```javascript {data-filename=tests/unit/helpers/format-currency-test.js}\nimport { formatCurrency } from 'my-app/helpers/format-currency';\nimport { module, test } from 'qunit';\n\nmodule('Unit | Helper | format currency', function(hooks) {\n  test('formats 199 with $ as currency sign', function(assert) {\n    assert.equal(formatCurrency([199], { sign: '$' }), '$1.99');\n  });\n});\n```\n\nAs seen in the [Writing Helpers](../../templates/writing-helpers/) guide. \nThe helper function expects the unnamed arguments as an array as the \nfirst argument. It expects the named arguments as\nan object as the second argument.\n\nNow we can move on to a more complex test case that ensures our helper is rendered \ncorrectly as well. This can be done with the `setupRenderingTest` helper, as shown \nin [Testing Components](../testing-components/).\n\n```javascript {data-filename=tests/integration/helpers/format-currency-test.js}\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'ember-qunit';\nimport { render } from '@ember/test-helpers';\nimport { hbs } from 'ember-cli-htmlbars';\n\nmodule('Integration | Helper | format currency', function(hooks) {\n  setupRenderingTest(hooks);\n\n  test('formats 199 with $ as currency sign', async function(assert) {\n    this.set('value', 199);\n    this.set('sign', '$');\n\n    await render(hbs`{{format-currency value sign=sign}}`);\n\n    assert.equal(this.element.textContent.trim(), '$1.99');\n  });\n});\n```\n\nWe can now also properly test if a helper will respond to property changes.\n\n```javascript {data-filename=tests/integration/helpers/format-currency-test.js}\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'ember-qunit';\nimport { render } from '@ember/test-helpers';\nimport { hbs } from 'ember-cli-htmlbars';\n\nmodule('Integration | Helper | format currency', function(hooks) {\n  setupRenderingTest(hooks);\n\n  test('formats 199 with $ as currency sign', async function(assert) {\n    this.set('value', 199);\n    this.set('sign', '$');\n\n    await render(hbs`{{format-currency value sign=sign}}`);\n\n    assert.equal(this.element.textContent.trim(), '$1.99');\n\n    this.set('sign', '€');\n\n    assert.equal(this.element.textContent.trim(), '€1.99', 'Value is formatted with €');\n  });\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Testing helpers follows previous patterns shown in Testing Components, because helpers are rendered to templates just like components. \n\nHelpers are best tested with rendering tests, but can also be tested with unit tests. Rendering tests will provide..."}}}