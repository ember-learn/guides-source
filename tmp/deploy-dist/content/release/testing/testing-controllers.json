{"data":{"type":"contents","id":"testing/testing-controllers","attributes":{"content":"_Container testing methods and computed properties follow previous patterns shown\nin [Testing Basics](../unit-testing-basics/) because Ember.Controller extends Ember.Object._\n\nControllers can be tested using the `setupTest` helper which is part\nof the ember-qunit framework. The tests written for instances like `Ember.Controller` are\nalso described as container tests.\n\n### Testing Controller Actions\n\nHere we have a controller `PostsController` with two properties, a method that\nsets one of those properties, and an action named `setProps`.\n\n> You can follow along by generating your own controller with `ember generate controller posts`.\n\n```javascript {data-filename=app/controllers/posts.js}\nimport Controller from '@ember/controller';\nimport { action } from '@ember/object';\n\nexport default class PostsController extends Controller {\n  propA = 'You need to write tests';\n  propB = 'And write one for me too';\n\n  setPropB(str) {\n    this.propB = str;\n  }\n\n  @action\n  setProps(str) {\n    this.propA = 'Testing is cool';\n    this.setPropB(str);\n  }\n}\n```\n\nThe `setProps` action directly sets one property, and calls the method to set the other.\nIn our generated test file, Ember CLI already uses the `module` and the `setupTest` helpers to set up a test\ncontainer:\n\n```javascript {data-filename=tests/unit/controllers/posts-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Controller | posts', function(hooks) {\n  setupTest(hooks);\n});\n```\n\nNext we use the owner API to gain access to the controller we'd like to test.\nUsing the `this.owner.lookup` method we get the instance of the `PostsController` and can check the action in our test.\nThe `this.owner.lookup` helper returns objects generated by the framework in your applications\nand is also exposed in tests for your usage. Here it will return a singleton instance of the `PostsController`.\n\n```javascript {data-filename=tests/unit/controllers/posts-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\n\nmodule('Unit | Controller | posts', function(hooks) {\n  setupTest(hooks);\n\n  test('should update A and B on setProps action', function(assert) {\n    assert.expect(4);\n\n    // get the controller instance\n    let controller = this.owner.lookup('controller:posts');\n\n    // check the properties before the action is triggered\n    assert.equal(\n      controller.propA,\n      'You need to write tests',\n      'propA initialized'\n    );\n    assert.equal(\n      controller.propB,\n      'And write one for me too',\n      'propB initialized'\n    );\n\n    // trigger the action on the controller by using the `send` method,\n    // passing in any params that our action may be expecting\n    controller.send('setProps', 'Testing Rocks!');\n\n    // finally we assert that our values have been updated\n    // by triggering our action.\n    assert.equal(controller.propA, 'Testing is cool', 'propA updated');\n    assert.equal(controller.propB, 'Testing Rocks!', 'propB updated');\n  });\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Container testing methods and computed properties follow previous patterns shown in Testing Basics because Ember.Controller extends Ember.Object. \n\nControllers can be tested using the setupTest helper which is part of the ember-qunit framework. The tests..."}}}