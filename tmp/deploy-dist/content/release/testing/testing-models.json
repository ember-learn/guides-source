{"data":{"type":"contents","id":"testing/testing-models","attributes":{"content":"_Container testing methods and computed properties follow previous patterns shown\nin [Testing Basics](../unit-testing-basics/) because DS.Model extends Ember.Object._\n\n[Ember Data](https://github.com/emberjs/data) Models can be tested in a module that uses the `setupTest` helper.\n\nLet's assume we have a `Player` model that has `level` and `levelName`\nattributes. We want to call `levelUp()` to increment the `level` and assign a\nnew `levelName` when the player reaches level 5.\n\n> You can follow along by generating your own model with `ember generate model player`.\n\n```javascript {data-filename=app/models/player.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class Player extends Model {\n  @attr('number', { defaultValue: 0 }) level;\n  @attr('string', { defaultValue: 'Noob' }) levelName;\n\n  levelUp() {\n    let newLevel = this.level++;\n    if (newLevel === 5) {\n      this.levelName = 'Professional';\n    }\n  }\n}\n```\n\nNow let's create a test which will call `levelUp` on the player when they are\nlevel 4 to assert that the `levelName` changes. We will use `module` together with the `setupTest` helper method:\n\n```javascript {data-filename=tests/unit/models/player-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport { run } from '@ember/runloop';\n\nmodule('Unit | Model | player', function(hooks) {\n  setupTest(hooks);\n\n  // Specify the other units that are required for this test.\n  test('should increment level when told to', function(assert) {\n    const player = run(() =>\n      this.owner.lookup('service:store').createRecord('player')\n    );\n\n    // wrap asynchronous call in run loop\n    run(() => player.levelUp());\n\n    assert.equal(player.level, 5, 'level gets incremented');\n    assert.equal(\n      player.levelName,\n      'Professional',\n      'new level is called professional'\n    );\n  });\n});\n```\n\nAlso note, how both creating a record and updating properties on the record through the `levelUp` method requires\nus to wrap these operations into a `run` function. You can read more the Ember run loop [over here](../../applications/run-loop/).\n\n## Testing Relationships\n\nFor relationships you probably only want to test that the relationship\ndeclarations are setup properly.\n\nAssume that a `User` can own a `Profile`.\n\n> You can follow along by generating your own user and profile models with `ember generate model user` and `ember generate model profile`.\n\n```javascript {data-filename=app/models/profile.js}\nimport Model from '@ember-data/model';\n\nexport default class ProfileModel extends Model {}\n```\n\n```javascript {data-filename=app/models/user.js}\nimport Model, { belongsTo } from '@ember-data/model';\n\nexport default class UserModel extends Model {\n  @belongsTo('profile') profile;\n}\n```\n\nThen you could test that the relationship by looking it up on the `user` model which it is part of.\n\n```javascript {data-filename=tests/unit/models/user-test.js}\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport { get } from '@ember/object';\n\nmodule('Unit | Model | user', function(hooks) {\n  setupTest(hooks);\n\n  test('should own a profile', function(assert) {\n    const User = this.owner.lookup('service:store').modelFor('user');\n\n    // lookup the relationship on the user model\n    const relationship = get(User, 'relationshipsByName').get('profile');\n\n    assert.equal(relationship.key, 'profile', 'has relationship with profile');\n    assert.equal(\n      relationship.kind,\n      'belongsTo',\n      'kind of relationship is belongsTo'\n    );\n  });\n});\n```\n\n_Ember Data contains extensive tests around the functionality of\nrelationships, so you probably don't need to duplicate those tests. You could\nlook at the [Ember Data tests](https://github.com/emberjs/data/tree/master/packages/-ember-data/tests) for examples of deeper relationship testing if you\nfeel the need to do it._","description":"Container testing methods and computed properties follow previous patterns shown in Testing Basics because DS.Model extends Ember.Object. \n\nEmber Data Models can be tested in a module that uses the setupTest helper. \n\nLet's assume we have a Player model..."}}}