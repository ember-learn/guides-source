{"data":{"type":"contents","id":"models/defining-models","attributes":{"content":"A model is a class that defines the properties and behavior of the\ndata that you present to the user. Anything that the user expects to see\nif they leave your app and come back later (or if they refresh the page)\nshould be represented by a model.\n\nWhen you want a new model for your application you need to create a new file\nunder the models folder and extend from `Model`. This is more conveniently\ndone by using one of Ember CLI's generator commands. For instance, let's create\na `person` model:\n\n```bash\nember generate model person\n```\n\nThis will generate the following file:\n\n```javascript {data-filename=app/models/person.js}\nimport Model from '@ember-data/model';\n\nexport default class PersonModel extends Model {\n}\n```\n\nAfter you have defined a model class, you can start [finding](../finding-records/)\nand [working with records](../creating-updating-and-deleting-records/) of that type.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        Ember Data models are normally setup using the singular form (which is why we use `person` instead of `people` here)\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n## Defining Attributes\n\nThe `person` model we generated earlier didn't have any attributes. Let's\nadd first and last name, as well as the birthday, using [`attr`](https://api.emberjs.com/ember-data/release/functions/@ember-data%2Fmodel/attr):\n\n```javascript {data-filename=app/models/person.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class PersonModel extends Model {\n  @attr title;\n  @attr name;\n  @attr birthday;\n}\n```\n\nAttributes are used when turning the JSON payload returned from your\nserver into a record, and when serializing a record to save back to the\nserver after it has been modified.\n\nYou can use attributes like any other property, including from within [getter functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get).\n\n```javascript {data-filename=app/models/person.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class PersonModel extends Model {\n  @attr title;\n  @attr name;\n\n  get fullName() {\n    return `${this.title} ${this.name}`;\n  }\n}\n```\n\n### Transforms\n\nYou may find the type of an attribute returned by the server does not\nmatch the type you would like to use in your JavaScript code. Ember\nData allows you to define simple serialization and deserialization\nmethods for attribute types called transforms. You can specify that\nyou would like a transform to run for an attribute by providing the\ntransform name as the first argument to the `attr` method. Ember Data\nsupports attribute types of `string`, `number`, `boolean`, and `date`,\nwhich coerce the value to the JavaScript type that matches its name.\n\n```javascript {data-filename=app/models/person.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class PersonModel extends Model {\n  @attr('string') name;\n  @attr('number') age;\n  @attr('boolean') admin;\n  @attr('date') birthday;\n}\n```\n\nThe `date` transform will transform an\n[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string to a JavaScript\ndate object.\n\nThe `boolean` transform can handle values other than `true` or\n`false`. The strings `\"true\"` or `\"t\"` in any casing, `\"1\"`, and the number\n`1` will all coerce to `true`, and `false` otherwise.\n\nTransforms are not required. If you do not specify a transform name\nEmber Data will do no additional processing of the value.\n\n#### Custom Transforms\n\nYou can also create custom transforms with Ember CLI's `transform` generator:\n\n```bash\nember generate transform dollars\n```\n\nHere is a simple transform that converts values between cents and US dollars.\n\n```javascript {data-filename=app/transforms/dollars.js}\nimport Transform from '@ember-data/serializer/transform';\n\nexport default class DollarsTransform extends Transform {\n  deserialize(serialized) {\n    return serialized / 100; // returns dollars\n  }\n\n  serialize(deserialized) {\n    return deserialized * 100; // returns cents\n  }\n}\n```\n\nA transform has two functions: `serialize` and `deserialize`. Deserialization\nconverts a value to a format that the client expects. Serialization does the\nreverse and converts a value to the format expected by the persistence layer.\n\nYou would use the custom `dollars` transform like this:\n\n```javascript {data-filename=app/models/product.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class ProductModel extends Model {\n  @attr('dollars') spent;\n}\n```\n\n### Options\n\n`attr` can also take a hash of options as a second parameter. At the moment\nthe only option available is `defaultValue`, which can use a value or a function\nto set the default value of the attribute if one is not supplied.\n\nIn the following example we define that `verified` has a default value of\n`false` and `createdAt` defaults to the current date at the time of the model's\ncreation:\n\n```javascript {data-filename=app/models/user.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class UserModel extends Model {\n  @attr('string') username;\n  @attr('string') email;\n  @attr('boolean', { defaultValue: false }) verified;\n  @attr('date', {\n    defaultValue() { return new Date(); }\n  }) createdAt;\n}\n```\n\n### Read-only Attributes\n\nWhen the API returns a deeply nested, read-only object or array,\nthere is no need to create multiple models with `attr('hasMany')` or `attr('belongsTo')`\nrelationships. This could result in a potentially large amount of unnecessary\ncode. You can access these objects in the template without transforming them. This can be\ndone by using `@attr` without specifying a transform:\n\n```javascript {data-filename=app/models/place.js}\nimport Model, { attr } from '@ember-data/model';\n\nexport default class PlaceModel extends Model {\n  @attr location; // a read-only object\n  @attr tags; // a read-only array\n}\n```\n\n```handlebars\n{{@model.location.latitude}}\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"A model is a class that defines the properties and behavior of the data that you present to the user. Anything that the user expects to see if they leave your app and come back later (or if they refresh the page) should be represented by a model. \n\nWhen you..."}}}