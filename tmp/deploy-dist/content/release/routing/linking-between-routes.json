{"data":{"type":"contents","id":"routing/linking-between-routes","attributes":{"content":"It is important to be able to switch between routes and link to different parts of\nyour application. We can do this declaratively in templates using the `<LinkTo>`\ncomponent.\n\n## The `<LinkTo />` Component\n\nYou create a link to a route using the\n[`<LinkTo />`](https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods/LinkTo?anchor=LinkTo)\ncomponent.\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('photos', function(){\n    this.route('edit', { path: '/:photo_id' });\n  });\n});\n```\n\n```handlebars {data-filename=app/templates/photos.hbs}\n<ul>\n  {{#each this.photos as |p|}}\n    <li>\n      <LinkTo @route=\"photos.edit\" @model={{p}}>{{p.title}}</LinkTo>\n    </li>\n  {{/each}}\n</ul>\n```\n\nThe `@route` argument is the name of the route to link to, and the `@model`\nargument is a model object to fill in the [dynamic segment](../../routing/defining-your-routes/#toc_dynamic-segments)\nfor the route.\n\nFor example, if `this.photos` is a list of three photos, the rendered HTML\nwould look something like this:\n\n```html\n<ul>\n  <li>\n    <a href=\"/photos/1\">Happy Kittens</a>\n  </li>\n  <li>\n    <a href=\"/photos/2\">Puppy Running</a>\n  </li>\n  <li>\n    <a href=\"/photos/3\">Mountain Landscape</a>\n  </li>\n</ul>\n```\n\nBy default, Ember.js will replace each dynamic segment in the URL with the\nmodel object's `id` property. In the example above, the `@model` argument\nis the `photo` objects, and their `id` properties are used to fill in the\ndynamic segment in the URL; in this case, either `1`, `2`, or `3`. This\nbehavior can be customized within `PhotoEditRoute`'s `serialize` hook.\n\nAlternatively, you can explicitly provide a serialized `id`, in place of\npassing a model object:\n\n```handlebars {data-filename=app/templates/photos.hbs}\n<LinkTo @route=\"photos.edit\" @model=\"1\">First Photo Ever</LinkTo>\n```\n\nIn this case, the provided `id` will be used to populate the URL's dynamic\nsegment directly, bypassing the `serialize` hook entirely:\n\n```html\n<a href=\"/photos/1\">First Photo Ever</a>\n```\n\nWhen the user clicks on the link, Ember will run the `PhotoEditRoute`'s `model`\nhook with `params.photo_id = 1`. On the other hand, if a model object was\npassed instead of the `id`, the model hook will _not_ run.\n\n### Active CSS Class\n\nWhen the generated link matches the current URL, then the generated link tag\nwill be given the `active` CSS class. For example, if you were at the URL\n`/photos/2`, the first example above would render as:\n\n```html\n<ul>\n  <li>\n    <a href=\"/photos/1\">Happy Kittens</a>\n  </li>\n  <li>\n    <a href=\"/photos/2\" class=\"active\">Puppy Running</a>\n  </li>\n  <li>\n    <a href=\"/photos/3\">Mountain Landscape</a>\n  </li>\n</ul>\n```\n\n### Multiple Dynamic Segments\n\nSometimes, you may need to generate links for nested routes which can\nhave multiple [dynamic segments](../../routing/defining-your-routes/#toc_dynamic-segments).\nFor example, consider the following route definitions:\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('photos', function(){\n    this.route('photo', { path: '/:photo_id' }, function(){\n      this.route('comments');\n      this.route('comment', { path: '/comments/:comment_id' });\n    });\n  });\n});\n```\n\nHere, the `photos.photo.comment` route have two dynamic segments:\n`:photo_id` and `:comment_id`.\n\nWhen passing a `@model` object to the `<LinkTo />` component, that single model\nobject will be used to populate the innermost dynamic segment. In this case,\nthat would be `:comment_id`. The `:photo_id` will be inferred from the current\nURL.\n\nFor example, if we are currently on `/photos/2`, then the following template:\n\n```handlebars {data-filename=app/templates/photos/photo.hbs}\n{{#each this.photo.comments as |comment|}}\n  <LinkTo @route=\"photos.photo.comment\" @model={{comment}}>\n    {{excerpt comment.body}}...\n  </LinkTo>\n{{/each}}\n```\n\n...will render something like this:\n\n```html\n<a href=\"/photos/2/comment/37\">\n  Aww this is...\n</a>\n<a href=\"/photos/2/comment/44\">\n  Great puppy...\n</a>\n<a href=\"/photos/2/comment/45\">\n  5/5 would pet...\n</a>\n```\n\nNote that while `:comment_id` is populated with each comment's `id` (based on\nthe `@model` argument), the `:photo_id` segment is automatically assumed to be\nthe same as the corresponding segment in current URL, i.e. `2`.\n\nEmber is only able to infer the dynamic segments because the `photo` route is\ncurrently active. If we were to invoke the `<LinkTo />` component for the same\n`photos.photo.comment` route, but from the `photos` route's template, it will\nresult in an error, as we did not pass enough model objects to populate all the\ndynamic segments needed to generate the URL.\n\nTo solve this problem, or maybe to cross-link comments from photos other than\nthe currently active one, you can pass an array of model objects using the\n`@models` argument and the `{{array}}` helper:\n\n```handlebars {data-filename=app/templates/photos.hbs}\n<h1>Latest Comments</h1>\n\n<ul>\n  {{#each this.latestComments as |comment|}}\n    <li>\n      <LinkTo @route=\"photos.photo.comment\" @models={{array comment.photo comment}}>\n        {{excerpt comment.body}}...\n      </LinkTo>\n    </li>\n  {{/each}}\n</ul>\n```\n\nHere, we are passing an array of model objects (the photo, then the comment),\nwhich is exactly what is needed to populate all the dynamic segments.\n\nThe `@model` argument is merely a special case for the more general `@models`\nargument. Therefore, it is an error to pass _both_ arguments at the same time.\n\n### Query Params\n\nThe `@query` argument, along with the `{{hash}}` helper, can be used to set\nquery params on a link:\n\n```handlebars\n// Explicitly set target query params\n<LinkTo @route=\"posts\" @query={{hash direction=\"asc\"}}>Sort</LinkTo>\n\n// Binding is also supported\n<LinkTo @route=\"posts\" @query={{hash direction=this.otherDirection}}>Sort</LinkTo>\n```\n\nFor more information on how to use query parameters see the [query parameters](../../routing/query-params/) section in Routing.\n\n### HTML Attributes\n\nWhen generating a link, you may want to customize its HTML attributes. For\nexample, it is quite common to want to add additional CSS classes to the\ngenerated link tag, or specifying the appropriate ARIA attributes. You can\nsimply pass them along with the invocation:\n\n```handlebars {data-filename=app/templates/photos/edit.hbs}\n<LinkTo @route=\"photos\" class=\"btn btn-primary\" role=\"button\" aria-pressed=\"false\">\n  Discard Changes\n</LinkTo>\n```\n\nCSS classes passed this way will be _in addition to_ the standard `ember-view`\nand possibly `active` classes.\n\nNote that the `<LinkTo />` component uses the element's `id` HTML attribute\ninternally for event dispatching purposes. For that reason, if you would like\nto customize its HTML `id`, you must pass it as the `@id` argument instead.\nOverriding the components `id` attribute directly will stop the link from\nfunctioning correctly.\n\n### Replacing history entries\n\nThe default behavior for the `<LinkTo />` component is to add entries to the\nbrowser's history when transitioning between routes. However, to replace the\ncurrent entry in the browser's history instead, you can use the `@replace`\noption:\n\n```handlebars\n<LinkTo @route=\"photo.comment\" @model={{this.topComment}} @replace={{true}}>\n  Top comment for the current photo\n</Link>\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"It is important to be able to switch between routes and link to different parts of your application. We can do this declaratively in templates using the <LinkTo> component. The <LinkTo /> Component \n\nYou create a link to a route using the <LinkTo />..."}}}