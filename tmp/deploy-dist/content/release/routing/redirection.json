{"data":{"type":"contents","id":"routing/redirection","attributes":{"content":"Sometimes you want to redirect a user to a different page than what they requested for.\n\nFor example, if they're not logged in, you might want to prevent them from editing their profile, accessing private information,\nor checking out items in their shopping cart.\nUsually you want to redirect them to the login page, and after they have successfully logged in, take them back to the page they originally wanted to access.\n\nThere are many other reasons you probably want to have the last word on whether a user can or cannot access a certain page.\nEmber allows you to control that access with a combination of hooks and methods in your route.\n\nOne of the methods is [`transitionTo()`](https://api.emberjs.com/ember/release/classes/RouterService/methods/transitionTo?anchor=transitionTo).\nCalling `transitionTo()` on the router service will stop any transitions currently in progress and start a new one, functioning as a redirect.\n\nThe other one is [`replaceWith()`](https://api.emberjs.com/ember/release/classes/RouterService/methods/replaceWith?anchor=replaceWith) which works the same way as `transitionTo()`.\nThe only difference between them is how they manage history.\n`replaceWith()` substitutes the current route entry and replaces it with that of the route we are redirecting to,\nwhile `transitionTo()` leaves the entry for the current route and creates a new one for the redirection.\n\nIf the new route has dynamic segments, you need to pass either a _model_ or an _identifier_ for each segment.\nPassing a model will skip the route's `model()` hook since the model is already loaded.\n\n## Transitioning Before the Model is Known\n\nSince a route's [`beforeModel()`](https://api.emberjs.com/ember/release/classes/Route/methods/beforeModel?anchor=beforeModel) executes before the `model()` hook,\nit's a good place to do a redirect if you don't need any information that is contained in the model.\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('posts');\n});\n```\n\n```javascript {data-filename=app/routes/index.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class IndexRoute extends Route {\n  @service router;\n\n  beforeModel(/* transition */) {\n    this.router.transitionTo('posts'); // Implicitly aborts the on-going transition.\n  }\n}\n```\n\n`beforeModel()` receives the current transition as an argument, which we can store and retry later.\nThis allows us to return the user back to the original route.\nFor example, we might redirect a user to the login page when they try to edit their profile, and immediately redirect\nthem back to the edit page once they have successfully logged in.\nSee [Storing and Retrying a Transition](../preventing-and-retrying-transitions/#toc_storing-and-retrying-a-transition)\nfor how to do that.\n\nIf you need to examine some application state to figure out where to redirect,\nyou might use a [service](../../services/).\n\n## Transitioning After the Model is Known\n\nIf you need information about the current model in order to decide about redirection, you can use the [`afterModel()`](https://api.emberjs.com/ember/release/classes/Route/methods/afterModel?anchor=afterModel) hook.\nIt receives the resolved model as the first parameter and the transition as the second one.\nFor example:\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('posts');\n  this.route('post', { path: '/post/:post_id' });\n});\n```\n\n```javascript {data-filename=app/routes/posts.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class PostsRoute extends Route {\n  @service router;\n\n  afterModel(model, transition) {\n    if (model.get('length') === 1) {\n      this.router.transitionTo('post', model.get('firstObject'));\n    }\n  }\n}\n```\n\nWhen transitioning to the `posts` route if it turns out that there is only one post,\nthe current transition will be aborted in favor of redirecting to the `PostRoute`\nwith the single post object being its model.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        If you attempt to redirect with the `queryParams` option, make sure\n        that the query params are defined on the controller!\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n\n### Child Routes\n\nLet's change the router above to use a nested route, like this:\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('posts', function() {\n    this.route('post', { path: '/:post_id' });\n  });\n});\n```\n\nIf we redirect to `posts.post` in the `afterModel` hook, `afterModel`\nessentially invalidates the current attempt to enter this route. So the `posts`\nroute's `beforeModel`, `model`, and `afterModel` hooks will fire again within\nthe new, redirected transition. This is inefficient, since they just fired\nbefore the redirect.\n\nInstead, we can use the [`redirect()`](https://api.emberjs.com/ember/release/classes/Route/methods/redirect?anchor=redirect) method, which will leave the original\ntransition validated, and not cause the parent route's hooks to fire again:\n\n```javascript {data-filename=app/routes/posts.js}\nimport Route from '@ember/routing/route';\nimport { service } from '@ember/service';\n\nexport default class PostsRoute extends Route {\n  @service router;\n\n  redirect(model, transition) {\n    if (model.get('length') === 1) {\n      this.router.transitionTo('posts.post', model.get('firstObject'));\n    }\n  }\n}\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"Sometimes you want to redirect a user to a different page than what they requested for. \n\nFor example, if they're not logged in, you might want to prevent them from editing their profile, accessing private information, or checking out items in their..."}}}