{"data":{"type":"contents","id":"contributing/adding-new-features","attributes":{"content":"Anyone can participate in adding new features to Ember. This guide will\nprovide some background information for developers who want to\ncontribute to the core [`ember.js` codebase](https://github.com/emberjs/ember.js).\n\n## RFCs\n\nNew features begin as RFCs (Request for Comments).\nThe RFC process is how community members and core team members\npropose changes, such as adding new features or\nmaking deprecations.\n\nYou can see work-in-progress proposals in the\n[Ember RFCs repository Pull Requests](https://github.com/emberjs/rfcs/pulls),\nand participate in giving feedback.\n[Merged RFCs](https://emberjs.github.io/rfcs/) are proposals\nthat can move forward with implementation.\nYou can reach out to an RFC author to find out how to\nget involved.\n\nYou can also [learn how to write your own RFC](https://github.com/emberjs/rfcs#ember-rfcs).\n\n## Background information\n\nHere are some tips for working in the [`ember.js` repository](https://github.com/emberjs/ember.js).\n\nTo learn how to make a pull request, review the\n[`CONTRIBUTING.md`](https://github.com/emberjs/ember.js/blob/master/CONTRIBUTING.md)\ninstructions.\n\nIn general, new feature development should be done on the `master` branch.\n\nBugfixes should not introduce new APIs or break existing APIs, and do\nnot need feature flags.\n\nFeatures can introduce new APIs, and need feature flags. They should not\nbe applied to the release or beta branches, since SemVer requires\nbumping the minor version to introduce new features.\n\nSecurity fixes should not introduce new APIs, but may, if strictly\nnecessary, break existing APIs. Such breakages should be as limited as\npossible.\n\n## Bug Fixes\n\n### Urgent Bug Fixes\n\nUrgent bugfixes are bugfixes that need to be applied to the existing\nrelease branch. If possible, they should be made on master and prefixed\nwith `[BUGFIX release]`.\n\n### Beta Bug Fixes\n\nBeta bugfixes are bugfixes that need to be applied to the beta branch.\nIf possible, they should be made on master and tagged with `[BUGFIX\nbeta]`.\n\n### Security Fixes\n\nSecurity fixes need to be applied to the beta branch, the current\nrelease branch, and the previous tag. If possible, they should be made\non master and tagged with `[SECURITY]`.\n\n## Features\n\nFeatures must always be wrapped in a feature flag. Tests for the feature\nmust also be wrapped in a feature flag.\n\nBecause the build-tools will process feature-flags, flags must use\nprecisely this format. We are choosing conditionals rather than a block\nform because functions change the surrounding scope and may introduce\nproblems with early return.\n\n```javascript\nif (Ember.FEATURES.isEnabled(\"feature\")) {\n  // implementation\n}\n```\n\nTests will always run with all features on, so make sure that any tests\nfor the feature are passing against the current state of the feature.\n\n### Commits\n\nCommits related to a specific feature should include  a prefix like\n`[FEATURE htmlbars]`. This will allow us to quickly identify all commits\nfor a specific feature in the future. Features will never be applied to\nbeta or release branches. Once a beta or release branch has been cut, it\ncontains all of the new features it will ever have.\n\nIf a feature has made it into beta or release, and you make a commit to\nmaster that fixes a bug in the feature, treat it like a bugfix as\ndescribed above.\n\n### Feature Naming Conventions\n\n```javascript {data-filename=config/environment.js}\nEmber.FEATURES['<packageName>-<feature>'] // if package specific\nEmber.FEATURES['container-factory-injections']\nEmber.FEATURES['htmlbars']\n```\n\n## Builds\n\nThe Canary build, which is based off master, will include all features,\nguarded by the conditionals in the original source. This means that\nusers of the canary build can enable whatever features they want by\nenabling them before creating their Ember.Application.\n\n```javascript {data-filename=config/environment.js}\nmodule.exports = function(environment) {\n  let ENV = {\n    EmberENV: {\n      FEATURES: {\n        htmlbars: true\n      }\n    },\n  }\n}\n```\n\n### `features.json`\n\nThe root of the repository will contain a `features.json` file, which will\ncontain a list of features that should be enabled for beta or release\nbuilds.\n\nThis file is populated when branching, and may not gain additional\nfeatures after the original branch. It may remove features.\n\n```javascript\n{\n  \"htmlbars\": true\n}\n```\n\nThe build process will remove any features not included in the list, and\nremove the conditionals for features in the list.\n\n### Continuous Integration Tests\n\nFor a new PR:\n\n1. Tests will run against master with all feature flags on.\n2. If a commit is tagged with `[BUGFIX beta]`, the commit will be\n   cherry-picked into beta, and the automated tests will be executed on that\n   branch. If the commit doesn't apply cleanly or the tests fail, the\n   build will fail.\n3. If a commit is tagged with `[BUGFIX release]`, the commit will be cherry-picked\n   into release, and the tests will be executed on the release branch. If the commit\n   doesn't apply cleanly or the tests fail, the build will fail.\n\nFor a new commit to master:\n\n1. Tests will be executed as described above.\n2. If the build passes, the commits will be cherry-picked into the\n   appropriate branches.\n\nThe idea is that new commits should be submitted as PRs to ensure they\napply cleanly when a PR is merged.\n\n### Go/No-Go Process\n\nEvery six weeks, the core team goes through the following process.\n\n#### Beta Branch\n\nAll remaining features on the beta branch are vetted for readiness. If\nany feature isn't ready, it is removed from `features.json`.\n\nOnce this is done, the beta branch is tagged and merged into release.\n\n#### Master Branch\n\nAll features on the master branch are vetted for readiness. In order for\na feature to be considered \"ready\" at this stage, it must be ready as-is\nwith no blockers. Features are a no-go even if they are close and\nadditional work on the beta branch would make it ready.\n\nBecause this process happens every six weeks, there will be another\nopportunity for a feature to make it soon enough.\n\nOnce this is done, the master branch is merged into beta. A\n`features.json` file is added with the features that are ready.\n\n### Beta Releases\n\nEvery week, we repeat the Go/No-Go process for the features that remain\non the beta branch. Any feature that has become unready is removed from\nthe `features.json`.\n\nOnce this is done, a Beta release is tagged and pushed.","description":"Anyone can participate in adding new features to Ember. This guide will provide some background information for developers who want to contribute to the core ember.js codebase. RFCs \n\nNew features begin as RFCs (Request for Comments). The RFC process is how..."}}}