{"data":{"type":"contents","id":"configuring-ember/specifying-url-type","attributes":{"content":"The Ember router has four options to manage your application's URL:  `history`,\nwhich uses the HTML5 History API; `hash`, which uses anchor-based URLs; `auto`,\nwhich uses `history` if supported by the user's browser, and falls back to\n`hash` otherwise; and `none`, which doesn't update the URL. By default, Ember\nCLI configures the router to use `history`. You can change this option in\n`config/environment.js` under `ENV.locationType`.\n\n## history\n\nWhen using `history`, Ember uses the browser's\n[history](http://caniuse.com/history) API to produce URLs with a structure like\n`/posts/new`.\n\nGiven the following router, entering `/posts/new` will take you to the `posts.new`\nroute.\n\n```javascript {data-filename=app/router.js}\nRouter.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n```\n\nKeep in mind that your server must serve the Ember app from all the URLs defined in your\n`Router.map` function. In other words, if your user directly navigates to\n`/posts/new`, your server must be configured to serve your Ember app in\nresponse.\n\n## hash\n\nThe `hash` option uses the URL's anchor to load the starting state of your\napplication and will keep it in sync as you move around. At present, this relies\non a [hashchange](http://caniuse.com/hashchange) event existing in the browser.\n\nIn the router example above, entering `/#/posts/new` will take you to the `posts.new`\nroute.\n\n## none\n\nFinally, if you don't want the browser's URL to interact with your application\nat all, you can disable the location API entirely by setting `ENV.locationType`\nto `none`. This is useful for\ntesting, or when you don't want Ember to muck with the URL (for example when you embed your\napplication in a larger page).","description":"The Ember router has four options to manage your application's URL: history, which uses the HTML5 History API; hash, which uses anchor-based URLs; auto, which uses history if supported by the user's browser, and falls back to hash otherwise; and none, which..."}}}