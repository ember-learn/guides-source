{"data":{"type":"contents","id":"configuring-ember/debugging","attributes":{"content":"Ember provides a browser extension and several configuration options\nto help you debug your application.\n\n## Ember Inspector\nThe [Ember Inspector](https://github.com/emberjs/ember-inspector) is a browser extension that makes it easy to\nunderstand and debug your Ember.js application. To learn more, check out the [dedicated guide](../../ember-inspector/).\n\n## Routing\n\n### Log router transitions\n\n```javascript {data-filename=app/app.js}\nimport Application from '@ember/application';\n\nexport default class App extends Application {\n  // Basic logging, e.g. \"Transitioned into 'post'\"\n  LOG_TRANSITIONS = true;\n\n  // Extremely detailed logging, highlighting every internal\n  // step made while transitioning into a route, including\n  // `beforeModel`, `model`, and `afterModel` hooks, and\n  // information about redirects and aborted transitions\n  LOG_TRANSITIONS_INTERNAL = true;\n}\n```\n## Views / Templates\n\n### Log view lookups\n\n```javascript {data-filename=config/environment.js}\nENV.APP.LOG_VIEW_LOOKUPS = true;\n```\n\n## Controllers\n\n### Log generated controller\n\n```javascript {data-filename=config/environment.js}\nENV.APP.LOG_ACTIVE_GENERATION = true;\n```\n\n## Miscellaneous\n\n### Turn on resolver resolution logging\n\nThis option logs all the lookups that are done to the console. Custom objects\nyou've created yourself have a tick, and Ember generated ones don't.\n\nIt's useful for understanding which objects Ember is finding when it does a lookup\nand which it is generating automatically for you.\n\n```javascript {data-filename=app/app.js}\nimport Application from '@ember/application';\n\nexport default class App extends Application {\n  LOG_RESOLVER = true;\n}\n```\n### Dealing with deprecations\n\nIn addition to what is described in the [Handling Deprecations guide](../handling-deprecations/),\nyou can turn on the following settings:\n\n```javascript\nEmber.ENV.RAISE_ON_DEPRECATION = true;\nEmber.ENV.LOG_STACKTRACE_ON_DEPRECATION = true;\n```\n\n### Implement an Ember.onerror hook to log all errors in production\n\n```javascript {data-filename=app/app.js}\nimport Ember from 'ember';\nimport fetch from 'fetch';\n// ...\nEmber.onerror = function(error) {\n  fetch('/error-notification', {\n    method: 'POST',\n    body: JSON.stringify({\n      stack: error.stack,\n      otherInformation: 'exception message'\n    })\n  });\n}\n```\n\n### Import the console\n\nIf you are using imports with Ember, be sure to import the console:\n\n```javascript\nEmber = {\n  imports: {\n    Handlebars: Handlebars,\n    jQuery: $,\n    console: window.console\n  }\n};\n```\n\n### Errors within `Ember.run.later` Backburner\n\n[Backburner.js](https://github.com/ebryn/backburner.js) has support for stitching the stacktraces together so that you can\ntrack down where an error thrown by `Ember.run.later` is being initiated from. Unfortunately,\nthis is quite slow and is not appropriate for production or even normal development.\n\nTo enable full stacktrace mode in Backburner, and thus determine the stack of the task\nwhen it was scheduled onto the run loop, you can set:\n\n```javascript {data-filename=app/app.js}\nimport { run } from '@ember/runloop';\n\nrun.backburner.DEBUG = true;\n```\n\nOnce the `DEBUG` value is set to `true`, when you are at a breakpoint you can navigate\nback up the stack to the `flush` method in and check the `errorRecordedForStack.stack`\nvalue, which will be the captured stack when this job was scheduled.","description":"Ember provides a browser extension and several configuration options to help you debug your application. Ember Inspector \n\nThe Ember Inspector is a browser extension that makes it easy to understand and debug your Ember.js application. To learn more, check..."}}}