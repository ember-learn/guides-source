{"data":{"type":"contents","id":"tutorial/part-1/more-about-components","attributes":{"content":"<!-- Heads up! This is a generated file, do not edit directly. You can find the source at https://github.com/ember-learn/super-rentals-tutorial/blob/master/src/markdown/tutorial/part-1/05-more-about-components.md -->\n\nIt's time to finally work on the rentals listing:\n\n<img src=\"/images/tutorial/part-1/more-about-components/rental-image@2x.png\" alt=\"The Super Rentals app by the end of the chapter\" width=\"1024\" height=\"1129\">\n\nWhile building this list of rental properties, you will learn about:\n\n- Generating components\n- Organizing code with namespaced components\n- Forwarding HTML attributes with `...attributes`\n- Determining the appropriate amount of test coverage\n\n## Generating Components\n\nLet's start by creating the `<Rental>` component. This time, we will use the component generator to create the template and test file for us:\n\n```shell\n$ ember generate component rental\ninstalling component\n  create app/components/rental.hbs\n  skip app/components/rental.js\n  tip to add a class, run `ember generate component-class rental`\ninstalling component-test\n  create tests/integration/components/rental-test.js\n```\n\nThe generator created two new files for us, a component template at `app/components/rental.hbs`, and a component test file at `tests/integration/components/rental-test.js`.\n\nWe will start by editing the template. Let's _[hard-code](https://en.wikipedia.org/wiki/Hard_coding)_ the details for one rental property for now, and replace it with the real data from the server later on.\n\n```handlebars { data-filename=\"app/components/rental.hbs\" data-diff=\"-1,+2,+3,+4,+5,+6,+7,+8,+9,+10,+11,+12,+13,+14,+15,+16,+17,+18\" }\n{{yield}}\n<article class=\"rental\">\n  <div class=\"details\">\n    <h3>Grand Old Mansion</h3>\n    <div class=\"detail owner\">\n      <span>Owner:</span> Veruca Salt\n    </div>\n    <div class=\"detail type\">\n      <span>Type:</span> Standalone\n    </div>\n    <div class=\"detail location\">\n      <span>Location:</span> San Francisco\n    </div>\n    <div class=\"detail bedrooms\">\n      <span>Number of bedrooms:</span> 15\n    </div>\n  </div>\n</article>\n```\n\nThen, we will write a test to ensure all of the details are present. We will replace the boilerplate test generated for us with our own assertions, just like we did for the `<Jumbo>` component earlier:\n\n```js { data-filename=\"tests/integration/components/rental-test.js\" data-diff=\"-9,-10,-11,-12,+13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,+26,+27,+28,+29,+30,+31\" }\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'super-rentals/tests/helpers';\nimport { render } from '@ember/test-helpers';\nimport { hbs } from 'ember-cli-htmlbars';\n\nmodule('Integration | Component | rental', function (hooks) {\n  setupRenderingTest(hooks);\n\n  test('it renders', async function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.set('myAction', function(val) { ... });\n\n  test('it renders information about a rental property', async function (assert) {\n    await render(hbs`<Rental />`);\n\n    assert.dom(this.element).hasText('');\n\n    // Template block usage:\n    await render(hbs`\n      <Rental>\n        template block text\n      </Rental>\n    `);\n\n    assert.dom(this.element).hasText('template block text');\n    assert.dom('article').hasClass('rental');\n    assert.dom('article h3').hasText('Grand Old Mansion');\n    assert.dom('article .detail.owner').includesText('Veruca Salt');\n    assert.dom('article .detail.type').includesText('Standalone');\n    assert.dom('article .detail.location').includesText('San Francisco');\n    assert.dom('article .detail.bedrooms').includesText('15');\n  });\n});\n```\n\nThe test should pass.\n\n<img src=\"/images/tutorial/part-1/more-about-components/pass@2x.png\" alt=\"Tests passing with the new &lt;Rental&gt; test\" width=\"1024\" height=\"512\">\n\nFinally, let's invoke this a couple of times from our index template to populate the page.\n\n```js { data-filename=\"app/templates/index.hbs\" data-diff=\"+6,+7,+8,+9,+10,+11,+12,+13\" }\n<Jumbo>\n  <h2>Welcome to Super Rentals!</h2>\n  <p>We hope you find exactly what you're looking for in a place to stay.</p>\n  <LinkTo @route=\"about\" class=\"button\">About Us</LinkTo>\n</Jumbo>\n\n<div class=\"rentals\">\n  <ul class=\"results\">\n    <li><Rental /></li>\n    <li><Rental /></li>\n    <li><Rental /></li>\n  </ul>\n</div>\n```\n\nWith that, we should see the `<Rental>` component showing our Grand Old Mansion three times on the page:\n\n<img src=\"/images/tutorial/part-1/more-about-components/three-old-mansions@2x.png\" alt=\"Three Grand Old Mansions\" width=\"1024\" height=\"1129\">\n\nThings are looking pretty convincing already; not bad for just a little bit of work!\n\n## Organizing Code with Namespaced Components\n\nNext, let's add the image for the rental property. We will use the component generator for this again:\n\n```shell\n$ ember generate component rental/image\ninstalling component\n  create app/components/rental/image.hbs\n  skip app/components/rental/image.js\n  tip to add a class, run `ember generate component-class rental/image`\ninstalling component-test\n  create tests/integration/components/rental/image-test.js\n```\n\nThis time, we had a `/` in the component's name. This resulted in the component being created at `app/components/rental/image.hbs`, which can be invoked as `<Rental::Image>`.\n\nComponents like these are known as _[namespaced](https://en.wikipedia.org/wiki/Namespace)_ components. Namespacing allows us to organize our components by folders according to their purpose. This is completely optionalâ€”namespaced components are not special in any way.\n\n## Forwarding HTML Attributes with `...attributes`\n\nLet's edit the component's template:\n\n```handlebars { data-filename=\"app/components/rental/image.hbs\" data-diff=\"-1,+2,+3,+4\" }\n{{yield}}\n<div class=\"image\">\n  <img ...attributes>\n</div>\n```\n\nInstead of hard-coding specific values for the `src` and `alt` attributes on the `<img>` tag, we opted for the `...attributes` keyword instead, which is also sometimes referred to as the _[\"splattributes\"](../../../components/component-arguments-and-html-attributes/#toc_html-attributes)_ syntax. This allows arbitrary HTML attributes to be passed in when invoking this component, like so:\n\n```handlebars { data-filename=\"app/components/rental.hbs\" data-diff=\"+2,+3,+4,+5\" }\n<article class=\"rental\">\n  <Rental::Image\n    src=\"https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg\"\n    alt=\"A picture of Grand Old Mansion\"\n  />\n  <div class=\"details\">\n    <h3>Grand Old Mansion</h3>\n    <div class=\"detail owner\">\n      <span>Owner:</span> Veruca Salt\n    </div>\n    <div class=\"detail type\">\n      <span>Type:</span> Standalone\n    </div>\n    <div class=\"detail location\">\n      <span>Location:</span> San Francisco\n    </div>\n    <div class=\"detail bedrooms\">\n      <span>Number of bedrooms:</span> 15\n    </div>\n  </div>\n</article>\n```\n\nWe specified a `src` and an `alt` HTML attribute here, which will be passed along to the component and attached to the element where `...attributes` is applied in the component template. You can think of this as being similar to `{{yield}}`, but for HTML attributes specifically, rather than displayed content. In fact, we have already used this feature [earlier](../building-pages/) when we passed a `class` attribute to `<LinkTo>`.\n\n<img src=\"/images/tutorial/part-1/more-about-components/rental-image@2x.png\" alt=\"The &lt;Rental::Image&gt; component in action\" width=\"1024\" height=\"1129\">\n\nThis way, our `<Rental::Image>` component is not coupled to any specific rental property on the site. Of course, the hard-coding problem still exists (we simply moved it to the `<Rental>` component), but we will deal with that soon. We will limit all the hard-coding to the `<Rental>` component, so that we will have an easier time cleaning it up when we switch to fetching real data.\n\nIn general, it is a good idea to add `...attributes` to the primary element in your component. This will allow for maximum flexibility, as the invoker may need to pass along classes for styling or ARIA attributes to improve accessibility.\n\nLet's write a test for our new component!\n\n```js { data-filename=\"tests/integration/components/rental/image-test.js\" data-diff=\"-9,-10,-11,-12,-13,-14,-15,-16,-17,+18,-20,-21,-22,+23,+24,+25,+26,-29,+30,+31,+32,+33,+34\" }\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'super-rentals/tests/helpers';\nimport { render } from '@ember/test-helpers';\nimport { hbs } from 'ember-cli-htmlbars';\n\nmodule('Integration | Component | rental/image', function (hooks) {\n  setupRenderingTest(hooks);\n\n  test('it renders', async function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.set('myAction', function(val) { ... });\n\n    await render(hbs`<Rental::Image />`);\n\n    assert.dom(this.element).hasText('');\n\n    // Template block usage:\n  test('it renders the given image', async function (assert) {\n    await render(hbs`\n      <Rental::Image>\n        template block text\n      </Rental::Image>\n      <Rental::Image\n        src=\"/assets/images/teaching-tomster.png\"\n        alt=\"Teaching Tomster\"\n      />\n    `);\n\n    assert.dom(this.element).hasText('template block text');\n    assert\n      .dom('.image img')\n      .exists()\n      .hasAttribute('src', '/assets/images/teaching-tomster.png')\n      .hasAttribute('alt', 'Teaching Tomster');\n  });\n});\n```\n\n## Determining the Appropriate Amount of Test Coverage\n\nFinally, we should also update the tests for the `<Rental>` component to confirm that we successfully invoked `<Rental::Image>`.\n\n```js { data-filename=\"tests/integration/components/rental-test.js\" data-diff=\"+18\" }\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'super-rentals/tests/helpers';\nimport { render } from '@ember/test-helpers';\nimport { hbs } from 'ember-cli-htmlbars';\n\nmodule('Integration | Component | rental', function (hooks) {\n  setupRenderingTest(hooks);\n\n  test('it renders information about a rental property', async function (assert) {\n    await render(hbs`<Rental />`);\n\n    assert.dom('article').hasClass('rental');\n    assert.dom('article h3').hasText('Grand Old Mansion');\n    assert.dom('article .detail.owner').includesText('Veruca Salt');\n    assert.dom('article .detail.type').includesText('Standalone');\n    assert.dom('article .detail.location').includesText('San Francisco');\n    assert.dom('article .detail.bedrooms').includesText('15');\n    assert.dom('article .image').exists();\n  });\n});\n```\n\nBecause we already tested `<Rental::Image>` extensively on its own, we can omit the details here and keep our assertion to the bare minimum. That way, we won't  _also_ have to update the `<Rental>` tests whenever we make changes to `<Rental::Image>`.\n\n<img src=\"/images/tutorial/part-1/more-about-components/pass-2@2x.png\" alt=\"Tests passing with the new &lt;Rental::Image&gt; test\" width=\"1024\" height=\"512\">","description":"It's time to finally work on the rentals listing: \n\n \n\nWhile building this list of rental properties, you will learn about: \n\n- Generating components\n- Organizing code with namespaced components\n- Forwarding HTML attributes with ...attributes\n- Determining..."}}}