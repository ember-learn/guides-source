{"data":{"type":"contents","id":"getting-started/working-with-html-css-and-javascript","attributes":{"content":"Ember is a framework for building applications that run in the browser, which\nmeans that they are made with HTML, CSS, and JavaScript. It is very helpful to\nbe familiar with these technologies. If you find yourself getting stuck or\nconfused as you learn Ember, come back to this page and see if there is a\ngeneral topic below that you could explore.\n\n## HTML\n\nHypertext Markup Language (HTML) is a language for specifying the layout of web\npages. It is a markup language that defines the structure of your content\ndeclaratively, which makes it very powerful. Ember provides a templating\nlanguage that extends HTML and provides tools for making that structure dynamic.\n\nIf you're new to HTML, we recommend [Mozilla's HTML Tutorial](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics)\nis fairly comprehensive, and the MDN site is one of the best resources for\nlearning about web APIs.\n\n## CSS\n\nCSS (Cascading Style Sheets) are used to style HTML. While HTML lays out the\nbasic structure, CSS provides the rules for how that structure should display in\nthe browser.\n\nIf you're new to CSS, we recommend [the MDN guide for learning it](https://developer.mozilla.org/en-US/docs/Learn/CSS/First_steps),\nas it is fairly comprehensive and up to date.\n\n## JavaScript\n\nJavaScript is the primary scripting language of the web. Most Ember apps have\nsome amount of JavaScript code in them.\n\nSince Ember is a template-oriented framework, not all developers need to\nuse JavaScript when working on Ember apps. Some developers may be more\nfocused on the structure of an app's templates, its styles, or the\naccessibility of an app. However, it's good to have some\ngeneral knowledge of JavaScript for the places where it is used.\n\nIf you're new to JavaScript, here are some excellent introductory materials:\n\n- [Mozilla's JavaScript Tutorial](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript)\n  is pretty comprehensive, and the MDN documentation is the go-to source for\n  learning about JavaScript and web APIs.\n- [javascript.info](https://javascript.info) is a detailed interactive guide\n  that takes you through from the basics to the details. This one is pretty good\n  for beginners with no programming experience, since it starts from scratch and\n  ramps up.\n- [ES6 for humans](https://github.com/metagrover/ES6-for-humans) is a great\n  resource if you're already familiar with JavaScript in general, but haven't\n  had a chance to get to know some of its latest features that were finalized in 2015.\n\nWe recommend familiarizing yourself with the following concepts in particular to\nmake the most out of these guides and of Ember:\n\n* **Classes** - classes are one of the most fundamental constructs\n  in JavaScript, and are used frequently in Ember. See the next section for more\n  details on them.\n* **Modules** - you will better understand [Ember CLI's](https://ember-cli.com/)\n  project structure and import paths if you are comfortable with\n  [JavaScript Modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules).\n* **Events** - The native way to deal with user input in browser based web\n  applications. Events are not part of the language of JavaScript itself, but\n  they are part of the browser environment that JavaScript runs in, and they are\n  used commonly in Ember. You can read the [MDN introduction to events](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events)\n  for more details.\n* **Promises** - the native way to deal with asynchrony in your JavaScript code.\n  See the relevant [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  section. In addition, modern [`async/await` function syntax](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await)\n  is good to know.\n\n## JavaScript Classes\n\nEmber uses [JavaScript classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)\nfor many of its constructs, such as Components, Routes, Services, and more:\n\n```js\nexport default class PermissionController extends Controller {\n  @tracked isAdmin = false;\n  @tracked isManager = false;\n\n  get canEdit() {\n    return this.isAdmin || this.isManager;\n  }\n}\n```\n\nSome of the features that Ember relies on, such as [class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations)\nand [decorators](https://github.com/tc39/proposal-decorators) have not yet been\nfully finalized in JavaScript just yet, so we'll cover these here with the\nassumption that you've had a chance to familiarize yourself with classes before.\nIf you haven't, you can also check out [our detailed class primer](../../in-depth-topics/native-classes-in-depth/).\n\n### Fields\n\nClass fields allow you to assign properties to an instance of the class on\nconstruction. You can define a field like this:\n\n```js\nclass Permission {\n  canEdit = false;\n}\n```\n\nThis is very similar to defining the `Permission` class with a constructor like\nthis:\n\n```js\nclass Permission {\n  constructor() {\n    this.canEdit = false;\n  }\n}\n```\n\nClass fields are somewhat like object properties, but they have some key\ndifferences. They are created and assigned to every instance of the class,\nmeaning that instance gets a _unique_ version of the field. This doesn't matter\nif the field is a primitive, like a string or a number, but does matter if it's\nan object or an array:\n\n```js\nclass Permission {\n  roles = [];\n}\n\nlet tom = new Permission();\nlet yehuda = new Permission();\n\ntom.roles === yehuda.roles;\n// false, they're different arrays\n```\n\nFields can also access the class instance using `this` when they are being\nassigned:\n\n```js\nclass Child {\n  constructor(parent) {\n    this.parent = parent;\n  }\n}\n\nclass Parent {\n  child = new Child(this);\n}\n```\n\nFields are assigned before any code in the `constructor` method is run, which is\nwhy we can rely on them being assigned correctly by the time it runs. Fields do\n_not_ exist on the class itself, nor do they exist on the class's prototype,\nthey only exist on the _instance_ of the class. However, they can be added to\nthe class directly using the `static` keyword, like other class elements.\n\n### Decorators\n\nDecorators are user defined modifiers that can be applied to a class or class\nelement such as a field or method to change its behavior. For instance, you\ncould create a `@cache` decorator that caches the return value of a getter the\nfirst time it is calculated:\n\n```js\nimport { cache } from 'my-cache-decorator';\n\nclass Counter {\n  _count = 0;\n\n  @cache\n  get count() {\n    return this._count++;\n  }\n}\n\nlet counter = new Counter();\n\nconsole.log(counter.count); // 0\nconsole.log(counter.count); // 0\n```\n\nDecorators are _normal_ JavaScript functions that get applied with a special\nsyntax, which is why you import them like any other function, but you use the\n`@` symbol when applying them. Decorators come in a variety of flavors, and some\ncan be applied to classes directly as well:\n\n```js\n@observable\nclass Permission {}\n```\n\nSome decorators can also receive arguments:\n\n```js\nclass Permission {\n  canEdit = false;\n\n  @alias('canEdit') editable;\n}\n\nlet current = new Permission();\nconsole.log(current.editable); // false\n```\n\nEmber provides a number of decorators, such as the `@tracked` decorator, that\nwill be described in greater detail later on in the guides.\n\n> _Note: Decorators are still being actively developed in JavaScript, which means\n> that there may be small changes in the future. The decorators provided by\n> Ember should remain stable through these changes, but it is recommended that\n> you exercise caution if using any external decorator libraries which may not\n> have the same stability guarantees._\n\n### Classic Classes\n\nClassic classes are deprecated, but it is still useful to be able\nto recognize them when looking at older code or blog posts.\nEmber used its own custom class syntax before native JavaScript classes existed,\nwhich looks like this:\n\n```js\nexport default Controller.extend({\n  isAdmin: tracked({ value: false }),\n  isManager: tracked({ value: false }),\n\n  canEdit: descriptor({\n    get() {\n      return this.isAdmin || this.isManager;\n    },\n  }),\n});\n```\n\nThis syntax is known as _classic class_ syntax. You can check out the\n[pre-Octane guides on classic classes](../../../v3.12.0/object-model/)\nfor more information on how to convert a classic class to modern Ember.\n\n## Cross-Browser Support\n\nJust like the JavaScript language changes over time, web browsers change too!\nEmber helps you to write code that can work across many different browsers and\ntheir versions. Behind the scenes, Ember uses Babel to compile modern JavaScript\nto something that can work on all browsers. Without this step, you could\naccidentally end up shipping code that works for your version of Chrome but\nbreaks for someone using Edge. Ember has you covered!\n\nLuckily, Ember comes with a solution out of the box for this. Ember applications\nuse [Babel](https://babeljs.io/) to compile modern JavaScript to something that\ncan work on _all_ browsers. This means you can write modern JavaScript and use\nthe latest features without any additional setup!\n\n> _Note: Some features require you to [enable the Babel polyfill](https://github.com/babel/ember-cli-babel#polyfill).\n> This adds some extra weight to your application, but ensures you'll be\n> compatible with any new features that are added to JavaScript._","description":"Ember is a framework for building applications that run in the browser, which means that they are made with HTML, CSS, and JavaScript. It is very helpful to be familiar with these technologies. If you find yourself getting stuck or confused as you learn..."}}}