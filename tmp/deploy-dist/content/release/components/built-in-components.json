{"data":{"type":"contents","id":"components/built-in-components","attributes":{"content":"Out of the box, Ember provides 2 components for building a form:\n\n* [`<Input>`](https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input)\n* [`<Textarea>`](https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Textarea)\n\nThese components are similar in HTML markup to the native `<input>` or `<textarea>` elements. In contrast to the native elements, `<Input>` and `<Textarea>` automatically update the state of their bound values.\n\n\n## `<Input>`\n\nWe mentioned that the built-in components are similar in HTML markup to their native counterparts. What does this mean?\n\nConsider the following example in a template file.\n\n```handlebars\n<label for=\"user-question\">Ask a question about Ember:</label>\n<Input\n  id=\"user-question\"\n  @type=\"text\"\n  @value=\"How do text fields work?\"\n/>\n```\n\nWhen Ember renders this template, you will see the following HTML code:\n\n```html\n<label for=\"user-question\">Ask a question about Ember:</label>\n<input id=\"user-question\" type=\"text\" value=\"How do text fields work?\" />\n```\n\n\n### Ways to associate labels and inputs\n\nEvery input should be associated with a label. In HTML, there are a few ways to do this. With the built-in `<Input>` component,\n\n1. You can nest the input inside the label.\n\n   ```handlebars\n   <label>\n     Ask a question about Ember:\n\n     <Input\n       @type=\"text\"\n       @value={{this.userQuestion}}\n     />\n   </label>\n   ```\n\n2. You can create an ID (globally unique within the webpage), then associate the label to the input with `for` attribute and `id` attribute.\n\n   ```handlebars\n   <label for={{this.myUniqueId}}>\n     Ask a question about Ember:\n   </label>\n\n   <Input\n     id={{this.myUniqueId}}\n     @type=\"text\"\n     @value={{this.userQuestion}}\n   />\n   ```\n\n3. You can use the `aria-label` attribute to label the input with a string that is visually hidden but still available to assistive technology. \n\n   ```handlebars\n   <Input\n     aria-label=\"Ask a question about Ember\"\n     @type=\"text\"\n     @value={{this.userQuestion}}\n   />\n   ```\n\nWhile it is more appropriate to use the `<label>` element, the `aria-label` attribute can be used in instances where visible text content is not possible.\n\n\n### Setting attributes on `<Input>`\n\nWith a few exceptions, you can pass [input attributes](https://developer.mozilla.org/docs/Web/HTML/Element/input#Attributes) as attributes (i.e. do not prepend `@`) to the `<Input>` component.\n\nFor example, the `aria-labelledby` attribute may be useful if you have a search input. The search button can serve as the label for the input element:\n\n```handlebars\n<Input aria-labelledby=\"button-search\" />\n<button id=\"button-search\" type=\"button\">Search</button>\n```\n\nIf an attribute is set to a quoted string (`\"button-search\"` in the prior example), its value will be set directly on the element.\n\nYou can also bind the attribute value to a property that you own.\nIn the next example, the `disabled` attribute is bound to the value of `isReadOnly` in the current context.\n\n```handlebars\n<label for=\"input-name\">Name:</label>\n<Input\n  id=\"input-name\"\n  @value={{this.name}}\n  disabled={{this.isReadOnly}}\n  maxlength=\"50\"\n/>\n```\n\nRecall that there were a few exceptions. The following input attributes must be passed as arguments (i.e. do prepend `@`) to the `<Input>` component:\n\n- `@checked`\n- `@type`\n- `@value`\n\n\n### Actions\n\nStarting with Ember Octane, we recommend using the `{{on}}` modifier to call an action on specific events such as the [input event](https://developer.mozilla.org/docs/Web/API/HTMLElement/input_event).\n\n```handlebars\n<label for=\"input-name\">Name:</label>\n<Input\n  id=\"input-name\"\n  @value={{this.name}}\n  {{on \"input\" this.validateName}}\n/>\n```\n\n[Learn more about the `{{on}}` modifier.](../../upgrading/current-edition/action-on-and-fn/#toc_the-on-modifier)\n\nLastly, Ember also provides custom input events `@enter`, `@insert-newline` and `@escape-press`. These events do not exist on native input elements, but you may find them to be useful for handling keyboard interactions.\n\nThe modern, Octane-style way to handle keyboard events is to [write a modifier](../../upgrading/current-edition/glimmer-components/#toc_writing-your-own-modifiers) to separate concerns: The component manages the state, while the modifier manages interactions with the DOM. Your action will receive an actual `event` object.\n\nThere are [community-made addons](https://emberobserver.com/?query=keyboard) to help manage keyboard events. For example, with [ember-keyboard](https://github.com/adopted-ember-addons/ember-keyboard), you can write,\n\n```handlebars\n{{!-- Before --}}\n<Input\n  @enter={{this.doSomething}}\n  @escape-press={{this.doSomethingElse}}\n/>\n\n{{!-- After --}}\n<Input\n  {{on-key \"Enter\" this.doSomething}}\n  {{on-key \"Escape\" this.doSomethingElse event=\"keydown\"}}\n/>\n```\n\nNote, the `keydown` event was used for `Escape` because `keypress` is deprecated.\n\n\n### Checkboxes\n\nYou can use the\n[`<Input>`](https://api.emberjs.com/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input)\ncomponent to create a checkbox. Set `@type` to the string `\"checkbox\"`, and use `@checked` instead of `@value`.\n\n```handlebars\n<label for=\"admin-checkbox\">Is Admin?</label>\n<Input\n  id=\"admin-checkbox\"\n  @type=\"checkbox\"\n  @checked={{this.isAdmin}}\n/>\n```\n\nTo call an action on specific events, use the `{{on}}` modifier:\n\n```handlebars\n<label for=\"admin-checkbox\">Is Admin?</label>\n<Input\n  id=\"admin-checkbox\"\n  @type=\"checkbox\"\n  @checked={{this.isAdmin}}\n  {{on \"input\" this.validateRole}}\n/>\n```\n\n\n## `<Textarea>`\n\nThe following example shows how to bind `this.userComment` to a text area's value.\n\n```handlebars\n<label for=\"user-comment\">Comment:</label>\n<Textarea\n  id=\"user-comment\"\n  @value={{this.userComment}}\n  rows=\"6\"\n  cols=\"80\"\n/>\n```\n\n\n### Setting attributes on `<Textarea>`\n\nWith the exception of `@value` argument, you can use any [attribute](https://developer.mozilla.org/docs/Web/HTML/Element/textarea#Attributes) that `<textarea>` natively supports.\n\n\n<!--\n  TODO:\n  Move this section to a dedicated page for how to build forms.\n  Please present a solution that does not use `{{mut}}`.\n-->\n## Binding dynamic attribute\n\nYou might need to bind a property dynamically to an input if you're building a\nflexible form, for example. To achieve this you need to use the\n[`{{get}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/get?anchor=get)\nand [`{{mut}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/mut?anchor=mut)\nin conjunction like shown in the following example:\n\n```handlebars\n<label for=\"input-name\">Name:</label>\n<Input\n  id=\"input-name\"\n  @value={{mut (get this.person this.field)}}\n/>\n```\n\nThe `{{get}}` helper allows you to dynamically specify which property to bind,\nwhile the `{{mut}}` helper allows the binding to be updated from the input. See\nthe respective helper documentation for more detail:\n[`{{get}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/get?anchor=get)\nand [`{{mut}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/mut?anchor=mut).","description":"Out of the box, Ember provides 2 components for building a form: \n\n- <Input>\n- <Textarea> \n\nThese components are similar in HTML markup to the native <input> or <textarea> elements. In contrast to the native elements, <Input> and <Textarea> automatically..."}}}