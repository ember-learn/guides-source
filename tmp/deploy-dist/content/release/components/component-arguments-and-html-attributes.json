{"data":{"type":"contents","id":"components/component-arguments-and-html-attributes","attributes":{"content":"Components become useful building blocks of our app if we make them _reusable_. When we reuse components efficiently, we can avoid having to recreate parts of our app again and again. If you want to _reuse_ a component in multiple places, you'll need a way to template out parts of it.\n\nLet's start with two similar but not identical avatar components, that represent\ndifferent users:\n\n```handlebars {data-filename=\"app/components/received-message/avatar.hbs\"}\n<aside>\n  <div class=\"avatar\" title=\"Tomster's avatar\">T</div>\n</aside>\n```\n\n```handlebars {data-filename=\"app/components/sent-message/avatar.hbs\"}\n<aside class=\"current-user\">\n  <div class=\"avatar\" title=\"Zoey's avatar\">Z</div>\n</aside>\n```\n\nThe _structure_ of these components is identical, but they have somewhat\ndifferent content (the user's first initial) and attributes (the `title` and `class`\nattributes).\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-message\">\n        You may notice that the <code>is-active</code> class on the\n        received message avatar from the previous chapters is missing here.\n        We'll cover that in the next chapter on\n        <a href=\"../conditional-content\">Conditional Content</a>.\n      </div>\n    </div>\n  </div>\n</div>\n\n## Arguments\n\nWe can create a component that can be used in both situations by _templating_\nthe parts of the HTML that are different.\n\n```handlebars {data-filename=\"app/components/avatar.hbs\"}\n<aside>\n  <div class=\"avatar\" title={{@title}}>{{@initial}}</div>\n</aside>\n```\n\nThe syntax `{{@initial}}` means that the contents inside the `<div>` tag are\n_dynamic_ and will be specified by the `<Avatar>` tag. Likewise, the\n`{{@title}}` syntax means that the contents of the `title` attribute are dynamic\nand will be specified in the same way. We can now replace the received message\navatar by using the `<Avatar>` tag and providing it with some arguments.\n\n```handlebars {data-filename=\"app/components/received-message/avatar.hbs\"}\n<Avatar @title=\"Tomster's avatar\" @initial=\"T\" />\n```\n\nThis code includes the `<Avatar>` component, which expects two _arguments_:\n`@title` and `@initial`.\n\nYou are probably familiar with HTML attributes, which tell the _browser_ how to\ndraw an HTML element. The syntax `@title=` is similar, but instead of telling\nthe _browser_ what to do, it's telling your custom tag what to do.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <p>\n          You might be wondering why Ember uses the `@` syntax for its\n          components instead of normal HTML attribute syntax. We'll learn why\n          in the next section.\n        </p>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>\n\n## HTML Attributes\n\nLet's try to use our `<Avatar>` component for the sent message avatar.\n\n```handlebars {data-filename=\"app/components/sent-message/avatar.hbs\"}\n<Avatar @title=\"Zoey's avatar\" @initial=\"Z\" />\n```\n\nWe're really, really close.\n\n```handlebars {data-filename=\"output\" data-diff=\"-1,+2\"}\n<aside class=\"current-user\">\n<aside>\n  <div class=\"avatar\" title=\"Zoey's avatar\">Z</div>\n</aside>\n```\n\nWe're just missing the `current-user` class on the HTML `<aside>` element. To\nmake that work, we'll specify the HTML attribute `class` on the `<Avatar>` tag.\n\n```handlebars {data-filename=\"app/components/sent-message/avatar.hbs\"}\n<Avatar\n  @title=\"Zoey's avatar\"\n  @initial=\"Z\"\n  class=\"current-user\"\n/>\n```\n\nThe avatar component also needs to specify where to put attributes that were\nspecified on the tag.\n\n```handlebars {data-filename=\"app/components/avatar.hbs\"}\n<aside ...attributes>\n  <div class=\"avatar\" title={{@title}}>{{@initial}}</div>\n</aside>\n```\n\nThe `...attributes` syntax determines where the attributes from a tag should\nappear in the component's template. Any number of attributes can be specified on\nthe avatar component now, and they will all end up on the element that has\n`...attributes`.\n\n<div class=\"cta\">\n  <div class=\"cta-note\">\n    <div class=\"cta-note-body\">\n      <div class=\"cta-note-heading\">Zoey says...</div>\n      <div class=\"cta-note-message\">\n        <p>\n          In general, you should place <code>...attributes</code> after any attributes you\n          specify to give people using your component an opportunity to override your attribute.\n          If <code>...attributes</code> appears <em>after</em> an attribute,\n          it overrides that attribute. If it appears <em>before</em> an attribute, it\n          does not.</p>\n        <p>\n          Place <code>...attributes</code>\n          <strong>before</strong> your attributes only if you want to disallow tags from\n          overriding your attributes. This is likely to be unusual.\n        </p>\n        <p>\n          In addition, the <code>class</code> attribute is special, and will be\n          <em>merged</em> with any existing classes on the element rather than\n          overwriting them. This allows you to progressively add CSS classes to\n          your components, and makes them more flexible overall.\n        </p>\n      </div>\n    </div>\n    <img src=\"/images/mascots/zoey.png\" role=\"presentation\" alt=\"\">\n  </div>\n</div>","description":"Components become useful building blocks of our app if we make them reusable. When we reuse components efficiently, we can avoid having to recreate parts of our app again and again. If you want to reuse a component in multiple places, you'll need a way to..."}}}