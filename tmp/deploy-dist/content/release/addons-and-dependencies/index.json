{"data":{"type":"contents","id":"addons-and-dependencies/index","attributes":{"content":"As you're developing your Ember app, you are likely to run into common scenarios that aren't addressed by Ember itself.\nPerhaps you want to use a CSS preprocessor to write your stylesheets, or you want to use a popular JS library, or maybe\nyou want to import components written by a different department within your organization.\n\nEmber CLI provides a common format called [Ember Addons](#toc_addons) for distributing reusable libraries to solve some\nof these problems.  Additionally, you may want to make use of front-end dependencies like a CSS framework or a JavaScript\ndatepicker that aren't specific to Ember apps.\n\n## Addons\n\nAddons are JavaScript packages that integrate with Ember. For example, [`ember-cli-sass`](https://github.com/adopted-ember-addons/ember-cli-sass)\nis an addon that allows you to use SASS/SCSS in your applications. You can install it using the Ember CLI with the following command:\n\n```bash\nember install ember-cli-sass\n```\n\nThis will modify your `package.json` (and `package-lock.json` or `yarn.lock`), typically bringing in other dependencies. Some addons will also add\nadditional files to your projects when relevant.\n\nThere are many addons that cover all kinds of use cases. For more detail, as well as examples of what addons can do,\nwe invite you to have a look at the [Ember CLI documentation](https://cli.emberjs.com/release/basic-use/using-addons/).\n\nThe Ember community publishes and maintains many addons, and it can be difficult to know if one (or many!) exists that covers\nyour needs. The website [Ember Observer](https://www.emberobserver.com/) keeps an up-to-date index of Ember Addons, sorted by\ncategories, and rated according to objective metrics. If you are looking for an addon, we recommend that you start there!\n\n## Regular npm packages\n\nWhile dependencies can be managed in several ways,\nit's worth noting that the process can be greatly simplified for new developers by using ember-auto-import,\nwhich offers zero config imports from npm packages. \nIt's built into new Ember apps by default and can be installed in older apps by using `ember install ember-auto-import`.\nFor further usage instructions, please follow the [project README](https://github.com/ef4/ember-auto-import).\n\n## Other assets\n\nThird-party JavaScript not available as an addon or npm package should be placed in the `vendor/` folder in your project.\n\nYour own assets (such as `robots.txt`, `favicon`, custom fonts, etc) should be placed in the `public/` folder in your project.\n\n## Compiling Assets\n\nWhen you're using dependencies that are not included in an addon,\nyou will have to instruct Ember CLI to include your assets in the build.\nThis is done using the asset manifest file `ember-cli-build.js`.\nYou should only try to import assets located in the `node_modules` and `vendor` folders.\n\n### Globals provided by JavaScript assets\n\nThe globals provided by some assets (like `moment` in the below example) can be used in your application\nwithout the need to `import` them.\nProvide the asset path as the first and only argument.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/moment/moment.js');\n```\n\nYou will need to add `\"moment\"` to the `globals` section in `.eslintrc.js` to prevent ESLint errors\nabout using an undefined variable.\n\n### Anonymous AMD JavaScript modules\n\nYou can transform an anonymous AMD module to a named one by using the `amd` transformation.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/moment/moment.js', {\n  using: [\n    { transformation: 'amd', as: 'moment' }\n  ]\n});\n```\n\nThis transformation allows you to `import` moment in your app. (e.g. `import moment from 'moment';`)\n\n### CommonJS JavaScript modules\n\n[ember-cli-cjs-transform](https://github.com/rwjblue/ember-cli-cjs-transform) allows us to import CommonJS modules into\nour Ember app. It also does auto-rollup and some nice caching, so it should pull in all the deps that are pulled in\nwith `require` for you automatically. It is not yet included with Ember CLI by default, so you will need to install it.\n\n```bash\nember install ember-cli-cjs-transform\n```\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/showdown/dist/showdown.js', {\n  using: [\n    { transformation: 'cjs', as: 'showdown' }\n  ]\n});\n```\n\nYou can now `import` them in your app. (e.g. `import showdown from 'showdown';`)\n\n### Environment-Specific Assets\n\nIf you need to use different assets in different environments, specify an object as the first parameter.\nThat object's key should be the environment name, and the value should be the asset to use in that environment.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import({\n  development: 'node_modules/moment/moment.js',\n  production:  'node_modules/moment/min/moment.min.js'\n});\n```\n\nIf you need to import an asset in only one environment you can wrap `app.import` in an `if` statement.\nFor assets needed during testing, you should also use the `{type: 'test'}` option to make sure they\nare available in test mode.\n\n```javascript {data-filename=ember-cli-build.js}\nif (app.env === 'development') {\n  // Only import when in development mode\n  app.import('vendor/ember-renderspeed/ember-renderspeed.js');\n}\nif (app.env === 'test') {\n  // Only import in test mode and place in test-support.js\n  app.import('node_modules/sinonjs/sinon.js', { type: 'test' });\n  app.import('node_modules/sinon-qunit/lib/sinon-qunit.js', { type: 'test' });\n}\n```\n\n### CSS\n\nProvide the asset path as the first argument:\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/foundation/css/foundation.css');\n```\n\nAll style assets added this way will be concatenated and output as `/assets/vendor.css`.\n\n### Other Assets\n\nAll assets located in the `public/` folder will be copied as is to the final output directory, `dist/`.\n\nFor example, a `favicon` located at `public/images/favicon.ico` will be copied to `dist/images/favicon.ico`.\n\nAll third-party assets, included either manually in `vendor/` or via a package manager like npm, must be added via `app.import()`.\n\nThird-party assets that are not added via `app.import()` will not be present in the final build.\n\nBy default, `import`ed assets will be copied to `dist/` as they are, with the existing directory structure maintained.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/font-awesome/fonts/fontawesome-webfont.ttf');\n```\n\nThis example would create the font file in `dist/font-awesome/fonts/fontawesome-webfont.ttf`.\n\nYou can also optionally tell `import()` to place the file at a different path.\nThe following example will copy the file to `dist/assets/fontawesome-webfont.ttf`.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/font-awesome/fonts/fontawesome-webfont.ttf', {\n  destDir: 'assets'\n});\n```\n\nIf you need to load certain dependencies before others,\nyou can set the `prepend` property equal to `true` on the second argument of `import()`.\nThis will prepend the dependency to the vendor file instead of appending it, which is the default behavior.\n\n```javascript {data-filename=ember-cli-build.js}\napp.import('node_modules/es5-shim/es5-shim.js', {\n  type: 'vendor',\n  prepend: true\n});\n```\n\n<!-- eof - needed for pages that end in a code block  -->","description":"As you're developing your Ember app, you are likely to run into common scenarios that aren't addressed by Ember itself. Perhaps you want to use a CSS preprocessor to write your stylesheets, or you want to use a popular JS library, or maybe you want to..."}}}