{"data":{"type":"contents","id":"in-depth-topics/patterns-for-components","attributes":{"content":"This guide assumes that you have read the [component guides](../../components/)\nand are familiar with how Ember components work. We'll cover components in more\ndepth in this section. At the end, we'll present recommended component patterns.\n\n## Argument Defaults\n\nAt some point, you may want to add default values to your arguments if one\nwasn't passed to your component. Arguments are not mutable, so if you attempt to\nreassign a value on `this.args`, it'll fail. Instead, you should define a getter\non your component that provides the default value if the argument was not\nprovided.\n\nFor instance, if you wanted to create a tooltip icon that had a standard icon\nand class, you could do it like so:\n\n```javascript {data-filename=app/components/tooltip.js}\nimport Component from '@glimmer/component';\n\nexport default class TooltipComponent extends Component {\n  get icon() {\n    return this.args.icon ?? 'icon-info';\n  }\n\n  get tooltipClass() {\n    return this.args.tooltipClass + ' tooltip';\n  }\n}\n```\n\n```handlebars {data-filename=app/components/tooltip.hbs}\n<div class={{this.tooltipClass}}>\n  <i class={{this.icon}}></i>\n  {{@content}}\n</div>\n```\n\nNow when called like so:\n\n```handlebars\n<Tooltip @content=\"I'm a tooltip!\"/>\n```\n\nThe result will be:\n\n```html\n<div class=\"tooltip\">\n  <i class=\"icon-info\"></i>\n  I'm a tooltip!\n</div>\n```\n\nNote that because arguments are prefixed with `@` in templates, and placed on\n`args` in the component definition, we can use the same name for our `icon` and\n`tooltipClass` getters, which is pretty convenient. We can also tell clearly\nwhen we look at the template for the tooltip that `this.tooltipClass` and\n`this.icon` are values that come from the class definition, and that means they\nprobably have been used in some kind of dynamic code (in this case, our\ndefaulting logic).\n\n## Attributes\n\n### Attribute Ordering\n\nThe positioning of `...attributes` matters, with respect to the other attributes\nin the element it is applied to. Attributes that come _before_ `...attributes`\ncan be overridden, but attributes that come _after_ cannot:\n\n```handlebars\n<p\n  data-overridable=\"you can override me\"\n  ...attributes\n  data-non-overridable=\"but you can't override me!\"\n>\n  ...\n</p>\n```\n\nThere is one exception to this, which is the `class` attribute. `class` will get\nmerged, since its more often the case that users of the component want to _add_\na class than completely override the existing ones. For `class`, the order of\n`...attributes` will determine the order of merging. Putting it before:\n\n```handlebars\n<p ...attributes class=\"friend-greeting\">\n  Hello {{@friend}}, I'm {{this.name}}!\n</p>\n```\n\nResults in:\n\n```html\n<p class=\"red-alert friend-greeting\">\n  Hello {{@friend}}, I'm {{this.name}}!\n</p>\n```\n\nAnd putting it after:\n\n```handlebars\n<p class=\"friend-greeting\" ...attributes>\n  Hello {{@friend}}, I'm {{this.name}}!\n</p>\n```\n\nResults in:\n\n```html\n<p class=\"friend-greeting red-alert\">\n  Hello {{@friend}}, I'm {{this.name}}!\n</p>\n```\n\n### `aria` Attributes\n\nThere are some `aria` attributes that can have multiple values **and** the order of those values matter.\nThe most frequently used of these is `aria-describedby` and `aria-labelledby`.\n\nIn these cases, make sure to declare _all_ of the relevant values in the correct order.\n\n```hbs\n<MyInput @input-label=\"Password\" aria-describedby=\"text-help-0 text-help-1\" />\n```\n\nTo learn more about `aria` roles and accessibility in Ember, check out the [Accessibility Guide](../../reference/accessibility-guide/).\n\n## Contextual Components\n\nThe [`{{component}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/component?anchor=component)\nhelper can be used to defer the selection of a component to runtime. The\n`<MyComponent />` syntax always renders the same component, while using the\n`{{component}}` helper allows choosing a component to render on the fly. This is\nuseful in cases where you want to interact with different external libraries\ndepending on the data. Using the `{{component}}` helper would allow you to keep\ndifferent logic well separated.\n\nThe first parameter of the helper is the name of a component to render, as a\nstring. So `{{component 'blog-post'}}` is the same as using `<BlogPost />`.\n\nThe real value of [`{{component}}`](https://api.emberjs.com/ember/release/classes/Ember.Templates.helpers/methods/component?anchor=component)\ncomes from being able to dynamically pick the component being rendered. Below is\nan example of using the helper as a means of choosing different components for\ndisplaying different kinds of posts:\n\n```handlebars {data-filename=app/components/foo-component.hbs}\n<h3>Hello from foo!</h3>\n<p>{{this.post.body}}</p>\n```\n\n```handlebars {data-filename=app/components/bar-component.hbs}\n<h3>Hello from bar!</h3>\n<div>{{this.post.author}}</div>\n```\n\n```handlebars {data-filename=app/templates/index.hbs}\n{{#each this.myPosts as |post|}}\n  {{!-- either foo-component or bar-component --}}\n  {{component post.postType post=post}}\n{{/each}}\n```\n\nor\n\n```handlebars {data-filename=app/templates/index.hbs}\n{{#each this.myPosts as |post|}}\n  {{!-- either foo-component or bar-component --}}\n  {{#let (component post.postType) as |Post|}}\n    <Post @post={{post}} />\n  {{/let}}\n{{/each}}\n```\n\nWhen the parameter passed to `{{component}}` evaluates to `null` or `undefined`,\nthe helper renders nothing. When the parameter changes, the currently rendered\ncomponent is destroyed and the new component is created and brought in.\n\nPicking different components to render in response to the data allows you to\nhave a different template and behavior for each case. The `{{component}}` helper\nis a powerful tool for improving code modularity.\n\n## Learn More\n\nTo keep this guide concise, we built a separate site for [component patterns in Ember](https://emberjs-1.gitbook.io/ember-component-patterns/).\nThis project also addresses anti-patterns and accessibility for components.\n\n[![ember-component-patterns](/images/ember-component-patterns.png)](https://emberjs-1.gitbook.io/ember-component-patterns/)","description":"This guide assumes that you have read the component guides and are familiar with how Ember components work. We'll cover components in more depth in this section. At the end, we'll present recommended component patterns. Argument Defaults \n\nAt some point..."}}}